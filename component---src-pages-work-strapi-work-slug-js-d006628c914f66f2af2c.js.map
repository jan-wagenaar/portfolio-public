{"version":3,"file":"component---src-pages-work-strapi-work-slug-js-d006628c914f66f2af2c.js","mappings":"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","sources":["webpack://jan-wagenaar-v2/./src/components/base/tag.js","webpack://jan-wagenaar-v2/./src/components/slider/slider-item.js","webpack://jan-wagenaar-v2/./src/components/slider/slider-wrapper.js","webpack://jan-wagenaar-v2/./src/components/slider/slider-nav.js","webpack://jan-wagenaar-v2/./src/components/slider/slider.js","webpack://jan-wagenaar-v2/./src/pages/work/{strapiWork.slug}.js"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst Tag = styled.div`\r\n    display: inline-block;\r\n    padding: var(--spacing-s) var(--spacing-base);\r\n    border: var(--spacing-xxxs) dotted var(--color-neutral-9);\r\n    font-size: var(--font-size-s);\r\n    font-weight: var(--font-weight-bold);\r\n`;\r\n\r\nexport default Tag;","import * as React from 'react';\r\nimport styled from 'styled-components';\r\nimport { GatsbyImage } from 'gatsby-plugin-image';\r\n\r\nconst SliderItem = ({index, image, isActive}) => {\r\n    const imageRef = React.useRef();\r\n    \r\n    React.useEffect(() => {\r\n      if(!isActive) return;\r\n\r\n      imageRef.current.scrollIntoView({behavior: \"smooth\", block: \"center\", inline: \"center\"});\r\n    },[isActive]);\r\n\r\n    return (\r\n        <StyledSliderItem data-slide={index} ref={imageRef}>\r\n            <GatsbyImage image={image} alt=\"\" />\r\n        </StyledSliderItem>\r\n    )\r\n};\r\n\r\nconst StyledSliderItem = styled.div`\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    scroll-snap-align: start;\r\n    flex-shrink: 0;\r\n    background-color: gray;\r\n    font-size: 6.25rem;\r\n    transform-origin: center center;\r\n    transform: scale(1);\r\n    transition: transform 0.5s;\r\n\r\n    & .gatsby-image-wrapper {\r\n        height: 100%;\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nexport default SliderItem;\r\n","import * as React from 'react';\r\nimport styled from 'styled-components';\r\nimport SliderItem from './slider-item';\r\n\r\nconst SliderWrapper = ({items, setSlide, currentSlide}) => {\r\n    const containerRef = React.useRef(null);  \r\n  \r\n    const handleSetSlide = React.useCallback((id) => {\r\n      setSlide(id);\r\n    },[setSlide]); \r\n    \r\n    const handleIntersection = React.useCallback((entries) => {\r\n      const [entry] = entries;\r\n      const activeSlide = Number(entry.target.dataset.slide);\r\n      if (!entry.isIntersecting || activeSlide === \"NaN\") return;\r\n  \r\n      handleSetSlide(activeSlide, handleSetSlide);\r\n    }, [handleSetSlide]);\r\n    \r\n    React.useEffect(() => {\r\n      const observer = new IntersectionObserver(\r\n        handleIntersection,\r\n        {\r\n          root: containerRef.current,\r\n          threshold: 0.45\r\n        }\r\n      );\r\n      Array.from(containerRef.current.children).forEach((item) => {\r\n          observer.observe(item);\r\n      });\r\n      return function() {\r\n         observer.disconnect();\r\n      }\r\n    }, [items, handleIntersection]);\r\n    \r\n    return (\r\n          <StyledSliderWrapper ref={containerRef} >\r\n              {items.map((item, index) => {\r\n                  return <SliderItem key={index} index={index} image={item.localFile.childImageSharp.gatsbyImageData} isActive={currentSlide === index} />\r\n                  })}\r\n          </StyledSliderWrapper>\r\n    )\r\n  };\r\n  \r\n  const StyledSliderWrapper = styled.div`\r\n      position: absolute;\r\n      display: flex;\r\n      width: 100%;\r\n      height: 100%;\r\n      overflow-x: auto;\r\n      scroll-snap-type: x mandatory;\r\n      scroll-behavior: smooth; \r\n      -ms-overflow-style: none;\r\n      scrollbar-width: none;\r\n  \r\n      &::-webkit-scrollbar {\r\n          display: none;\r\n        }\r\n  `;\r\n  \r\n  export default SliderWrapper;","import * as React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst SliderNav = ({currentSlide, maxItems, moveToSlide}) => {\r\n  const moveSlideUp = () => {\r\n    moveToSlide(currentSlide + 1);\r\n  }\r\n  \r\n  const moveSlideDown = () => {\r\n    moveToSlide(currentSlide - 1);\r\n  }\r\n  \r\n  return (\r\n    <StyledSliderNav>\r\n      <StyledSliderNavButton onClick={moveSlideDown} disabled={currentSlide === 0}>\r\n        <i className=\"fa-solid fa-chevron-left\" /> \r\n      </StyledSliderNavButton>\r\n      <StyledSliderNavIndicator>\r\n        {currentSlide + 1} / {maxItems}\r\n      </StyledSliderNavIndicator>\r\n      <StyledSliderNavButton onClick={moveSlideUp} disabled={currentSlide + 1 === maxItems}>\r\n        <i className=\"fa-solid fa-chevron-right\" /> \r\n      </StyledSliderNavButton>\r\n    </StyledSliderNav>\r\n  )\r\n};\r\n\r\nconst StyledSliderNav = styled.div`\r\n    position: absolute;\r\n    display: flex;\r\n    right: 0;\r\n    bottom: 0;\r\n    background: var(--color-neutral-0);\r\n    color: white;\r\n`;\r\n\r\nconst StyledSliderNavIndicator = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-width: 4.5rem;\r\n    padding: 0 1rem;\r\n    color: var(--color-text);\r\n    font-weight: bold;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nconst StyledSliderNavButton = styled.button`\r\n    height: 4rem;\r\n    width: 4rem;\r\n    background-color: var(--color-neutral-0);\r\n    color: var(--color-text);\r\n    font-size: 1.5rem;\r\n    outline: none;\r\n    border: none;\r\n    border-radius: 0;\r\n    cursor: pointer;\r\n    transition: all 0.2s ease; \r\n\r\n    &:hover, &:focus {\r\n        background-color: var(--color-neutral-3);\r\n    }\r\n\r\n    &:disabled {\r\n      background-color: var(--color-neutral-0);\r\n      color: var(--color-neutral-0);\r\n      pointer-events: none;\r\n    } \r\n`;\r\n\r\nexport default SliderNav;","import * as React from 'react';\r\nimport styled from 'styled-components';\r\nimport SliderWrapper from './slider-wrapper';\r\nimport SliderNav from './slider-nav';\r\n\r\nconst Slider = ({images}) => { \r\n  const [currentSlide, SetCurrentSlide] = React.useState(0);\r\n  const moveToSlide = (id) => {\r\n      SetCurrentSlide(id);\r\n  } \r\n\r\n  return (\r\n    <StyledSlider id=\"slider\">\r\n      <SliderWrapper \r\n        items={images} \r\n        setSlide={SetCurrentSlide} \r\n        currentSlide={currentSlide} \r\n      />\r\n      <SliderNav \r\n        currentSlide={currentSlide} \r\n        moveToSlide={moveToSlide} \r\n        maxItems={images.length}\r\n      />\r\n    </StyledSlider>\r\n    )\r\n};\r\n\r\nconst StyledSlider = styled.div`\r\n    position: relative;\r\n    width: 100%;\r\n    padding-bottom: 100%;\r\n    text-align: center;\r\n    overflow: hidden;\r\n    box-sizing: border-box;\r\n    overscroll-behavior-x: none;\r\n`;\r\n\r\nexport default Slider;","import React from \"react\";\r\nimport { graphql } from 'gatsby';\r\n\r\nimport Page from \"../../components/layout/page\";\r\nimport { LayoutContainer, LayoutItemWrapper, LayoutRow } from \"../../components/layout/layout\";\r\nimport { TextLink } from \"../../components/base/links\";\r\nimport { Heading } from \"../../components/base/typography\";\r\nimport MarkdownWrapper from \"../../components/markdown/markdown-wrapper\";\r\nimport Tag from \"../../components/base/tag\";\r\nimport Slider from \"../../components/slider/slider\";\r\nimport { ButtonLink } from \"../../components/base/links\";\r\n\r\nexport default function WorkDetail ({data}) {\r\n\r\n  return (\r\n    <>\r\n      <Page \r\n        active=\"work\"\r\n        // title={data.strapiPost.SEO.metaTitle}\r\n        // description={data.strapiPost.SEO.metaDescription}\r\n        // keyword={data.strapiPost.SEO.keywords}\r\n        // image={data.strapiPost.cover}\r\n      >\r\n        <LayoutContainer>   \r\n          <LayoutRow>\r\n            <LayoutItemWrapper center>\r\n                <Slider images={data.strapiWork.workphotos} />\r\n            </LayoutItemWrapper>\r\n            <LayoutItemWrapper rowGap columnCenter>\r\n                  <div>\r\n                <TextLink to=\"/work\"><i className=\"fa-solid fa-chevron-left\" />Back to overview</TextLink>\r\n                  </div>\r\n                  <div>\r\n                    <Heading level={2}>{data.strapiWork.name}</Heading>\r\n                    <Tag>{data.strapiWork.category.name}</Tag>\r\n                  </div>\r\n                  <MarkdownWrapper\r\n                    htmlAst={data.strapiWork.description.data.childMarkdownRemark.htmlAst}\r\n                    options={{\r\n                      p: {\r\n                        topMargin: false\r\n                      }\r\n                    }}\r\n                  />\r\n                  <div>\r\n                    <ButtonLink href={data.strapiWork.demoUrl} as=\"a\">View demo</ButtonLink>\r\n                  </div> \r\n            </LayoutItemWrapper>\r\n          </LayoutRow>   \r\n          </LayoutContainer>\r\n      </Page>\r\n    </>\r\n  )\r\n};\r\n\r\nexport const query = graphql`\r\nquery getWorkItem($slug: String) {\r\n  strapiWork(slug: {eq: $slug}) {\r\n    id\r\n    name\r\n    demoUrl\r\n    category {\r\n      name\r\n    }\r\n    workphotos {\r\n      localFile {\r\n        childImageSharp {\r\n          gatsbyImageData\r\n        }\r\n      }\r\n    }\r\n    description {\r\n      data {\r\n        childMarkdownRemark {\r\n          htmlAst\r\n        }\r\n      }\r\n    }\r\n  }\r\n} \r\n`"],"names":["Tag","styled","StyledSliderItem","index","image","isActive","imageRef","React","current","scrollIntoView","behavior","block","inline","ref","G","alt","StyledSliderWrapper","items","setSlide","currentSlide","containerRef","handleSetSlide","id","handleIntersection","entries","entry","activeSlide","Number","target","dataset","slide","isIntersecting","observer","IntersectionObserver","root","threshold","Array","from","children","forEach","item","observe","disconnect","map","key","localFile","childImageSharp","gatsbyImageData","StyledSliderNav","StyledSliderNavIndicator","StyledSliderNavButton","maxItems","moveToSlide","onClick","disabled","className","StyledSlider","images","SetCurrentSlide","length","WorkDetail","data","active","center","strapiWork","workphotos","rowGap","columnCenter","to","level","name","category","htmlAst","description","childMarkdownRemark","options","p","topMargin","href","demoUrl","as"],"sourceRoot":""}