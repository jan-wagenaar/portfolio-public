{"version":3,"file":"component---src-pages-work-js-0c352c200f4d2b31f05f.js","mappings":"kQAWA,I,EAAA,EATaA,EAAAA,QAAAA,IAAAA,WAAU,qDAAVA,CAAU,0G,oBCQvB,MAAMC,EAAkB,IAAc,IAAb,MAACC,GAAM,EAC5B,OACI,gBAAC,KAAU,CAACC,cAAY,EAACC,SAAS,SAC7BF,EAAMG,KAAIC,GAAQ,gBAACC,EAAQ,CAACC,IAAKF,EAAKG,GAAIC,MAAOJ,EAAKK,KAAMC,KAAMN,EAAKM,KAAMC,cAAeP,EAAKO,cAAcC,cACvG,EAIfP,EAAW,IAAmC,IAAlC,MAACG,EAAK,KAAEE,EAAI,cAAEC,GAAc,EAC1C,MAAME,GAAQC,EAAAA,EAAAA,GAASH,GAEvB,OACA,gBAAC,KAAQ,CAACI,GAAE,SAAWL,GACnB,gBAACM,EAAe,KACR,gBAACC,EAAa,CAACJ,MAAOA,EAAOK,IAAI,eACjC,gBAACC,EAAY,KAAEX,IAEhB,EAITQ,GAAkBlB,EAAAA,EAAAA,SAAOsB,GAAK,oFAAZtB,CAAY,0OAwB9BmB,GAAgBnB,EAAAA,EAAAA,SAAOuB,EAAAA,GAAY,kFAAnBvB,CAAmB,kBAInCqB,GAAerB,EAAAA,EAAAA,SAAOwB,EAAAA,GAAK,iFAAZxB,CAAY,sPAW3BkB,GAKAO,EAAc,IAAsC,IAArC,iBAACC,EAAgB,YAAEC,GAAY,EAChD,MAAMC,GAAOC,EAAAA,EAAAA,IAAe,cAUtBC,EAAgBC,IAClBJ,EAAYI,EAAEC,OAAOC,QAAQC,SAAS,EAG1C,OACI,gBAACC,EAAkB,KACf,gBAACC,EAAgB,CAAC5B,IAAI,MAAM6B,QAASP,EAAc,gBAAc,GAAGQ,SAA+B,KAArBZ,GAAyB,OACtGE,EAAKW,kBAAkBC,MAAMC,MAAM,GAAGC,UAAUrC,KAAIC,GAAQ,gBAAC8B,EAAgB,CAAC5B,IAAKF,EAAKK,KAAM2B,SAAUZ,IAAqBpB,EAAKK,KAAM0B,QAASP,EAAc,gBAAexB,EAAKK,MAAOL,EAAKK,QAC/K,EAIvBwB,EAAqBnC,EAAAA,QAAAA,IAAAA,WAAU,4EAAVA,CAAU,sFAO/BoC,EAAmBpC,EAAAA,QAAAA,OAAAA,WAAa,0EAAbA,CAAa,mMAKzB2C,GAASA,EAAML,SAAW,yBAA2B,sBAC1CK,GAASA,EAAML,SAAW,yBAA2B,2BAMvEK,GAASA,EAAML,WAAYM,EAAAA,EAAAA,KAAG,6CAM9BC,EAAAA,EAAAA,GAAc,+GCjDpB,MAnEiB,IAAa,IAAZ,KAACjB,GAAK,EACtB,MAAM,cAAEkB,GAAkBlB,EACpB1B,GAAK,OAAO4C,EAAcN,QACzBd,EAAkBqB,GAAuBC,EAAAA,SAAe,IAO/D,OACE,gCACE,gBAAC,IAAI,CAACC,OAAO,QACX,gBAAC,KAAe,KACd,gBAAC,KAAS,KACR,gBAAC,KAAiB,CAACC,WAAS,GAC1B,gBAAC,IAAO,CAACC,MAAO,GAAG,QACnB,gBAAC1B,EAAW,CACVC,iBAAkBA,EAClBC,YAbaO,IACzBa,EAAoBb,EAAS,IAanB,gBAACjC,EAAe,CACdC,MAAOA,EAAMkD,QAAO9C,GAA6B,KAArBoB,GAA2BpB,EAAK4B,SAASvB,OAASe,UAMvF,C","sources":["webpack://jan-wagenaar-v2/./src/components/base/card.js","webpack://jan-wagenaar-v2/./src/components/page-content/work-content.js","webpack://jan-wagenaar-v2/./src/pages/work.js"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst Card = styled.div`\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 15rem;\r\n    height: 18rem;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nexport default Card;","import React from 'react';\r\nimport styled, {css} from 'styled-components';\r\nimport { LayoutGrid } from '../layout/layout';\r\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image';\r\nimport { Text } from '../base/typography';\r\nimport { BaseLink } from '../base/links';\r\nimport Card from '../base/card';\r\nimport { useStaticQuery, graphql } from 'gatsby';\r\nimport breakpoints from '../layout/breakpoints';\r\n\r\nconst WorkGridWrapper = ({posts}) => {\r\n    return (\r\n        <LayoutGrid columnCenter maxWidth='70rem' >\r\n            {posts.map(item => <WorkCard key={item.id} title={item.name} slug={item.slug} featuredImage={item.featuredImage.localFile} />)}\r\n        </LayoutGrid>\r\n    )\r\n};\r\n\r\nconst WorkCard = ({title, slug, featuredImage}) => {\r\n    const image = getImage(featuredImage);\r\n\r\n    return (\r\n    <BaseLink to={`/work/${slug}`}>\r\n        <WorkCardWrapper>\r\n                <WorkCardImage image={image} alt=\"screenshot\" />  \r\n                <WorkCardText>{title}</WorkCardText> \r\n        </WorkCardWrapper>\r\n    </BaseLink>\r\n    )\r\n};\r\n\r\nconst WorkCardWrapper = styled(Card)`\r\n    z-index: 0;\r\n    overflow: hidden;\r\n\r\n\r\n\r\n    &::after {\r\n        content: \"\";\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        height: 100%;\r\n        width: 100%;\r\n        background-color: var(--color-primary-1);\r\n        opacity: 0;\r\n        transition: all var(--transition-base);\r\n        z-index: 1;\r\n    }\r\n\r\n    &:hover::after {\r\n        opacity: 0.95;   \r\n    }\r\n`;\r\n\r\nconst WorkCardImage = styled(GatsbyImage)`\r\n    height: 100%;\r\n`;\r\n\r\nconst WorkCardText = styled(Text)`\r\n    position: absolute;\r\n    left: var(--spacing-m);\r\n    bottom: -5rem;\r\n    margin: 0;\r\n    color: var(--color-neutral-0);\r\n    font-size: var(--font-size-l);\r\n    font-weight: var(--font-weight-bold);\r\n    transition: all var(--transition-fast);\r\n    z-index: 2;\r\n\r\n    ${WorkCardWrapper}:hover & {\r\n        bottom: var(--spacing-m);\r\n    }\r\n`;\r\n\r\nconst WorkFilters = ({selectedCategory, setCategory}) => {\r\n    const data = useStaticQuery(graphql`\r\n        query getCategories {\r\n            allStrapiCategory {\r\n                nodes {\r\n                    name\r\n                }\r\n            }\r\n        }       \r\n    `);\r\n\r\n    const handleChange = (e) => {\r\n        setCategory(e.target.dataset.category);\r\n    }\r\n\r\n    return (\r\n        <WorkFiltersWrapper>\r\n            <WorkFilterButton key=\"All\" onClick={handleChange} data-category=\"\" isActive={selectedCategory === \"\"}>All</WorkFilterButton>\r\n            {data.allStrapiCategory.nodes.slice(0).reverse().map(item => <WorkFilterButton key={item.name} isActive={selectedCategory === item.name} onClick={handleChange} data-category={item.name}>{item.name}</WorkFilterButton>)}\r\n        </WorkFiltersWrapper>\r\n    )\r\n};\r\n\r\nconst WorkFiltersWrapper = styled.div`\r\n    position: relative;\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    margin-top: var(--spacing-m);   \r\n`;\r\n\r\nconst WorkFilterButton = styled.button`\r\n    margin: 0;\r\n    padding: var(--spacing-base); \r\n    min-width: 4rem;\r\n    font-weight: var(--font-weight-semibold);\r\n    color: ${props => props.isActive ? 'var(--color-neutral-1)' : 'var(--color-text)'};\r\n    background-color: ${props => props.isActive ? 'var(--color-neutral-8)' : 'var(--color-neutral-4)'};\r\n    border: none;\r\n    border-radius: 0;\r\n    cursor: pointer;\r\n    appearance: none;\r\n\r\n    ${props => props.isActive && css`\r\n        .dark-mode & {\r\n            color: var(--color-text);\r\n        }\r\n    `}\r\n\r\n    ${breakpoints.sm`\r\n        min-width: 6rem;\r\n        padding: var(--spacing-base) var(--spacing-m);\r\n    `}\r\n`;\r\n\r\nexport {WorkGridWrapper, WorkFilters}","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Page from '../components/layout/page';\r\nimport { LayoutContainer, LayoutItemWrapper, LayoutRow } from '../components/layout/layout';\r\nimport { Heading } from '../components/base/typography';\r\nimport { WorkFilters, WorkGridWrapper } from '../components/page-content/work-content';\r\n\r\nconst WorkPage = ({data}) => {\r\n  const { allStrapiWork } = data;\r\n  const posts = [...allStrapiWork.nodes];\r\n  const [selectedCategory, setSelectedCategory] = React.useState(\"\")\r\n\r\n\r\n  const handleSetCategory = (category) => {\r\n    setSelectedCategory(category);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Page active=\"work\">\r\n        <LayoutContainer>\r\n          <LayoutRow>\r\n            <LayoutItemWrapper rowCenter>\r\n              <Heading level={1}>Work</Heading>\r\n              <WorkFilters \r\n                selectedCategory={selectedCategory} \r\n                setCategory={handleSetCategory} />\r\n              <WorkGridWrapper \r\n                posts={posts.filter(item => selectedCategory === \"\" || item.category.name === selectedCategory)} \r\n              />\r\n            </LayoutItemWrapper>\r\n          </LayoutRow>\r\n        </LayoutContainer>\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query getWork {\r\n    allStrapiWork(sort: {createdAt: DESC}) {\r\n      nodes {\r\n        id\r\n        name\r\n        slug\r\n        description {\r\n          data {\r\n            description\r\n          }\r\n        }\r\n        demoUrl\r\n        category {\r\n          name\r\n        }\r\n        workphotos {\r\n          name\r\n          localFile {\r\n            childImageSharp {\r\n              gatsbyImageData(width: 600, placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\r\n            }\r\n          }\r\n        }\r\n        featuredImage {\r\n          localFile {\r\n            childImageSharp {\r\n              gatsbyImageData(width: 200, placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default WorkPage;\r\n"],"names":["styled","WorkGridWrapper","posts","columnCenter","maxWidth","map","item","WorkCard","key","id","title","name","slug","featuredImage","localFile","image","getImage","to","WorkCardWrapper","WorkCardImage","alt","WorkCardText","Card","GatsbyImage","Text","WorkFilters","selectedCategory","setCategory","data","useStaticQuery","handleChange","e","target","dataset","category","WorkFiltersWrapper","WorkFilterButton","onClick","isActive","allStrapiCategory","nodes","slice","reverse","props","css","breakpoints","allStrapiWork","setSelectedCategory","React","active","rowCenter","level","filter"],"sourceRoot":""}