{
    "componentChunkName": "component---src-pages-blog-strapi-post-slug-js",
    "path": "/blog/things-i-learned-at-the-outsystems-advanced-bootcamp/",
    "result": {"data":{"strapiPost":{"title":"Things I learned at the Outsystems Advanced bootcamp","cover":{"alternativeText":"cover.png","url":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1665249906/cover_492a1363b7.png","localFile":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/static/70531cef1e6a9567afd03532754c25d7/cc869/cover_492a1363b7.png","srcSet":"/static/70531cef1e6a9567afd03532754c25d7/5bd83/cover_492a1363b7.png 507w,\n/static/70531cef1e6a9567afd03532754c25d7/6670a/cover_492a1363b7.png 1013w,\n/static/70531cef1e6a9567afd03532754c25d7/cc869/cover_492a1363b7.png 2026w","sizes":"(min-width: 2026px) 2026px, 100vw"},"sources":[{"srcSet":"/static/70531cef1e6a9567afd03532754c25d7/bdb14/cover_492a1363b7.webp 507w,\n/static/70531cef1e6a9567afd03532754c25d7/603b5/cover_492a1363b7.webp 1013w,\n/static/70531cef1e6a9567afd03532754c25d7/f429a/cover_492a1363b7.webp 2026w","type":"image/webp","sizes":"(min-width: 2026px) 2026px, 100vw"}]},"width":2026,"height":727}}}},"content":{"data":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The Outsystems Advanced bootcamp is a deep dive in the entire Outsystems ecosystem. In the past week I attended it at \", mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"https://www.transfer-solutions.com/\"\n  }, \"Transfer Solutions\"), \". It has been a great learning experience, ranging from small tips to best practices and more conceptual topics. I\\u2019m happy to share a few with you.\")), mdx(\"h3\", null, \"Avoid monolithic architectures\"), mdx(\"p\", null, \"A great deal of the bootcamp deals with the architecture of Outsystems environments. Makes sense, since a good architecture will help keep your development pace on par. As your environment grows, you might be able to group common subjects into domains. For example, we can group our sales related applications into a Commercial domain. In Lifetime you can group applications, and assign them to different teams. If you\\u2019re developing in a common core or foundation module, splitting your environment into parts will avoid impacting your whole factory. On the flipside, this type of architecture may lead to duplicate data and logic. When working with dependencies across domains, you can use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://success.outsystems.com/Documentation/11/Developing_an_Application/Reuse_and_Refactor/Use_Services_to_Expose_Functionality\"\n  }, \"service actions\"), \". This is similar to an server action, but uses an REST interface. This means you won\\u2019t have to refresh your dependencies when making a non-breaking change. I like that, but it can be a fallacy too. You won\\u2019t be alerted for outdated dependencies, so you will have to figure this out yourselves. \"), mdx(\"h3\", null, \"An aggregate may be better than a reusable action\"), mdx(\"p\", null, \"As with your factory architecture, it\\u2019s best to consider between reusability and performance on a screen level. When working with aggregates, Outsystems only retrieves the columns you\\u2019re using from the database. But when you\\u2019re assigning the full list as output of a server action, it will retrieve everything from the database.\"), mdx(\"img\", {\n    \"src\": \"https://res.cloudinary.com/dqwogyxqp/image/upload/v1648404129/Agregate_list_as_output_aff4a4f5b4.png\",\n    \"alt\": \"Agregate list as output.png\"\n  }), mdx(\"p\", null, \"So avoid using a server action to retrieve your data on a screen, since you rarely use everything. I\\u2019m using scaffolding often, so the extra work is neglectable.\"), mdx(\"h3\", null, \"Integrate using Integration Studio\"), mdx(\"p\", null, \"Service Studio offers a lot of functionality when consuming and exposing REST / SOAP API\\u2019s. But if not adequate, you can write your own integration plugin in .NET. Use cases might include custom cyphering and authentication. This is something that\\u2019s entirely new to me, but probably something I won\\u2019t need to do since the Forge is offering plugins to handle most use cases.\"), mdx(\"h3\", null, \"Avoid timeouts in timers\"), mdx(\"p\", null, \"Timers are a great way to handle batch processing. This is one of the biggest subjects at the Outsystems Traditional Professional exam, the exam that is following up on the bootcamp. So naturally we did get a few best practices for timers. I\\u2019m sharing one of the best patterns with you, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.outsystems.com/forums/discussion/60880/best-practices-timer-example-of-shown-code/\"\n  }, \"the self-restarting timer\"), \". This timer pattern sets a timeout and checks it within the loop. This timeout will often be 10 minutes, which is safely below the standard 20 minute timeout of timers. After exceeding the time limit, the time will restart itself using the WakeTimer node. You will need to implement functionality to keep track of the processed batches, but this way you\\u2019ll never run in a timeout. \"), mdx(\"img\", {\n    \"src\": \"https://res.cloudinary.com/dqwogyxqp/image/upload/v1648404130/Timer_best_practice_89b8c62c08.png\",\n    \"alt\": \"Timer best practice.png\"\n  }), mdx(\"p\", null, \"The coming two weeks I\\u2019ll be busy reading documentation for the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.outsystems.com/Certifications/\"\n  }, \"Professional Traditional \"), mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.outsystems.com/Certifications/\"\n  }, \"Web Developer exam\"), \". This exam is said to be quite difficult, so hopefully I will have some time left to enjoy the beautiful spring weather in the Netherlands now!\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"SEO":{"metaDescription":"Sharing my experience of the Outsystems Advanced bootcamp","metaTitle":"Things I learned at the Outsystems Advanced bootcamp"}}},"pageContext":{"id":"72031594-3a7a-580d-b64d-d38622a305d5","slug":"things-i-learned-at-the-outsystems-advanced-bootcamp","__params":{"slug":"things-i-learned-at-the-outsystems-advanced-bootcamp"}}},
    "staticQueryHashes": ["2389677789"]}