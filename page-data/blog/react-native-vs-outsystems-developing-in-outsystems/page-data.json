{"componentChunkName":"component---src-pages-blog-strapi-post-slug-js","path":"/blog/react-native-vs-outsystems-developing-in-outsystems/","result":{"data":{"strapiPost":{"title":"React Native vs. Outsystems  - developing in Outsystems","cover":{"alternativeText":"react-vs-lowcode-cover.png","url":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1672319248/react_vs_lowcode_cover_bdb2cc232e.png","localFile":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/static/2b025f40e69e4f54de4ce6f6f108a79d/ce255/react_vs_lowcode_cover_bdb2cc232e.png","srcSet":"/static/2b025f40e69e4f54de4ce6f6f108a79d/ecf24/react_vs_lowcode_cover_bdb2cc232e.png 712w,\n/static/2b025f40e69e4f54de4ce6f6f108a79d/ee4bc/react_vs_lowcode_cover_bdb2cc232e.png 1423w,\n/static/2b025f40e69e4f54de4ce6f6f108a79d/ce255/react_vs_lowcode_cover_bdb2cc232e.png 2846w","sizes":"(min-width: 2846px) 2846px, 100vw"},"sources":[{"srcSet":"/static/2b025f40e69e4f54de4ce6f6f108a79d/49483/react_vs_lowcode_cover_bdb2cc232e.webp 712w,\n/static/2b025f40e69e4f54de4ce6f6f108a79d/687f8/react_vs_lowcode_cover_bdb2cc232e.webp 1423w,\n/static/2b025f40e69e4f54de4ce6f6f108a79d/5a9cd/react_vs_lowcode_cover_bdb2cc232e.webp 2846w","type":"image/webp","sizes":"(min-width: 2846px) 2846px, 100vw"}]},"width":2846,"height":1424}}}},"content":{"data":{"childMarkdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"React Native vs. Outsystems - developing in Outsystems"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"In this series I will be comparing the developer experience of React\nNative and the low code platform Outsystems. After getting to know\nReactive Native, we will build the same sample app in\n[Outsystems]("},{"type":"element","tagName":"a","properties":{"href":"http://www.outsystems.com"},"children":[{"type":"text","value":"www.outsystems.com"}]},{"type":"text","value":"). It's low code development tool,\nwhich supports both mobile and React applications. Building the app in\nboth tools gives you a chance to compare the developer experience. After\nbuilding the app, we will test the functionality. This can either be\ndone on web or your own mobile phone."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This series will be split into 3 blog items, since there is a lot to\ndiscuss. In this second part I will show you how to implement some\nfunctionality in a demo app. This will be done in Outsystems' Service\nStudio IDE. This second tutorial can be done without [the first\npart](/blog/react-native-vs-low-code-developing-in-react-native/), but\nfeel free to read it!"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"The goal"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this second part we'll build a similar app as in the first part of\nthis series. The goal is to build a simple count down app, which will\ndisplay a list of events. This was inspired by [CodeMentor's dev\nproject]("},{"type":"element","tagName":"a","properties":{"href":"https://www.codementor.io/projects/mobile/countdown-mobile-app-bjzn08zcon"},"children":[{"type":"text","value":"https://www.codementor.io/projects/mobile/countdown-mobile-app-bjzn08zcon)"}]},{"type":"text","value":".\nThere will be visual difference, but the functionality will be the same."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"[img 1]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can view the [online demo](\n"},{"type":"element","tagName":"a","properties":{"href":"https://jwagenaar.outsystemscloud.com/PreviewInDevices/?IsMobilePreview=True&DeviceName=Smartphone&URL=/Countdown/Events"},"children":[{"type":"text","value":"https://jwagenaar.outsystemscloud.com/PreviewInDevices/?IsMobilePreview=True&DeviceName=Smartphone&URL=/Countdown/Events"}]},{"type":"text","value":")\nto get a glimpse of the end result."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this tutorial, we'll be creating a PWA. This enables easier\ndeployment. Outsystems is able to generate native applications based\nReact Native, but in a lot of cases using a PWA makes sense."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Getting started"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before we start to develop in Outsystems, you will need to follow [this\nguide](\n"},{"type":"element","tagName":"a","properties":{"href":"https://success.outsystems.com/Documentation/11/Getting_started"},"children":[{"type":"text","value":"https://success.outsystems.com/Documentation/11/Getting_started"}]},{"type":"text","value":"). It\nwill help you make an account and download the required tool to start\ndeveloping. The IDE Outsystems uses is Service Studio, in which you can\ncreate screens, logic and other parts of your application. It is where\nmost of your development will take place."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To kickstart the creation of your application, I've created [this\nboilerplate](). Download and double-click it. That will open Service\nStudio and install your app."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"[img 2 -- install boiler plate]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Retrieving data from local database"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We start with creating the most basic functionality of your application:\ndisplaying data. On mobile, Outsystems [uses your local\nstorage]("},{"type":"element","tagName":"a","properties":{"href":"https://success.outsystems.com/Documentation/11/Developing_an_Application/Use_Data/Offline"},"children":[{"type":"text","value":"https://success.outsystems.com/Documentation/11/Developing_an_Application/Use_Data/Offline"}]},{"type":"text","value":")\nto save your data. Retrieving that data is quite easy using Aggregates.\nAggregates provide you a visual way of writing queries on your local\nstorage."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Open the EventDetail screen in Service studio and right click. That will\npresent you with the following options:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"[img 3 -- aggregate]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Click "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Fetch data from Local Storage"}]},{"type":"text","value":". That will create an aggregate on\nyour screen. Click "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Add Source"}]},{"type":"text","value":" and select "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Event"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"[img 4 -- select event]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Click on the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Widget Tree"}]},{"type":"text","value":" tab to view your screen elements in a tree\nview. Find the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"CountDownHeader"}]},{"type":"text","value":" web block. When you click on this web\nblock, it's details are shown in the right-down corner. Click on the\nDateTime input parameter and change its value to\n`GetEventById.List.Current.Event.DateTime`."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"[img 5 -- change input]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"That will pass down the retrieved data to the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"CountDownHeader"}]},{"type":"text","value":" web\nblock. Further on in this tutorial, we will implement a pretty format\nfunction to display a more friendly date time format."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Handling user input using forms"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In order to create new count down records, I've created the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"EventEdit"}]},{"type":"text","value":"\nscreen. This screen contains a form to edit and create count down\nrecords. We will implement a date picker in this form."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the Widgets list on the right, search for "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"date"}]},{"type":"text","value":". Drag and drop this\ndate picker widget in the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Ctn_InputDatePicker"}]},{"type":"text","value":" container."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"[img 6 -date picker]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The date picker pattern requires a date variable and a Selected event\nhandler. Go ahead and click the Input1 input that has been created. As\nvariable select `GetEventById.List.Current.Event.DateTime`. That will\nbind the data retrieved from the database with your input."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"[img 7]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now we need to implement an event handler to update a selected date.\nClick "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"New Client Action"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"[img 8 -- add event handler]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In your new event handler, add an assign. Assign\n`GetEventById.List.Current.Event.DateTime` to `SelectedDateTime`."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"[img 9 -- set new date time]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Delete items from our local database"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Outsystems provides built-in database actions. You can use these to\nmanipulate data in your local database. In the Logic tab create an\nclient action called `Event_Delete`. Add an `EventId` input\nparameter. Outsystems should automatically set it's type to Event\nidentifier. If not, change it accordingly. From the Data tab, drag the\nDelete action to the new delete wrapper."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"[img 10 -- delete action]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Implementing a new library"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Date pretty format"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Outsystems provides multiple ways to extend your logic beyond your\nplatform. The easiest way is by downloading a plugin from the Forge.\nClick the Forge tab and search for "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Date pretty format"}]},{"type":"text","value":". Download the\n"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"DateTime_PrettyFormat"}]},{"type":"text","value":" plugin. In your Count down app, open "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Manage\nreferences"}]},{"type":"text","value":". Search for the xx module and add a reference xx action."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Testing the app"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Click the One-click Publish button to upload your changes. When your\napplication is published, it turns into \"Open in browser\". Clicking it\nwill open Device Preview, where you can test a preview in the browser."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Publish and test app"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Debugging?"}]}],"data":{"quirksMode":false}}},"content":"# React Native vs. Outsystems - developing in Outsystems\n\n**In this series I will be comparing the developer experience of React\nNative and the low code platform Outsystems. After getting to know\nReactive Native, we will build the same sample app in\n\\[Outsystems\\](www.outsystems.com). It's low code development tool,\nwhich supports both mobile and React applications. Building the app in\nboth tools gives you a chance to compare the developer experience. After\nbuilding the app, we will test the functionality. This can either be\ndone on web or your own mobile phone.**\n\nThis series will be split into 3 blog items, since there is a lot to\ndiscuss. In this second part I will show you how to implement some\nfunctionality in a demo app. This will be done in Outsystems' Service\nStudio IDE. This second tutorial can be done without \\[the first\npart\\](/blog/react-native-vs-low-code-developing-in-react-native/), but\nfeel free to read it!\n\n## The goal\n\nIn this second part we'll build a similar app as in the first part of\nthis series. The goal is to build a simple count down app, which will\ndisplay a list of events. This was inspired by \\[CodeMentor's dev\nproject\\]([https://www.codementor.io/projects/mobile/countdown-mobile-app-bjzn08zcon)](https://www.codementor.io/projects/mobile/countdown-mobile-app-bjzn08zcon).\nThere will be visual difference, but the functionality will be the same.\n\n\\[img 1\\]\n\nYou can view the \\[online demo\\](\nhttps://jwagenaar.outsystemscloud.com/PreviewInDevices/?IsMobilePreview=True&DeviceName=Smartphone&URL=/Countdown/Events)\nto get a glimpse of the end result.\n\nIn this tutorial, we'll be creating a PWA. This enables easier\ndeployment. Outsystems is able to generate native applications based\nReact Native, but in a lot of cases using a PWA makes sense.\n\n## Getting started\n\nBefore we start to develop in Outsystems, you will need to follow \\[this\nguide\\](\n<https://success.outsystems.com/Documentation/11/Getting_started>). It\nwill help you make an account and download the required tool to start\ndeveloping. The IDE Outsystems uses is Service Studio, in which you can\ncreate screens, logic and other parts of your application. It is where\nmost of your development will take place.\n\nTo kickstart the creation of your application, I've created \\[this\nboilerplate\\](). Download and double-click it. That will open Service\nStudio and install your app.\n\n\\[img 2 -- install boiler plate\\]\n\n## Retrieving data from local database\n\nWe start with creating the most basic functionality of your application:\ndisplaying data. On mobile, Outsystems \\[uses your local\nstorage\\](https://success.outsystems.com/Documentation/11/Developing_an_Application/Use_Data/Offline)\nto save your data. Retrieving that data is quite easy using Aggregates.\nAggregates provide you a visual way of writing queries on your local\nstorage.\n\nOpen the EventDetail screen in Service studio and right click. That will\npresent you with the following options:\n\n\\[img 3 -- aggregate\\]\n\nClick *Fetch data from Local Storage*. That will create an aggregate on\nyour screen. Click *Add Source* and select *Event*.\n\n\\[img 4 -- select event\\]\n\nClick on the *Widget Tree* tab to view your screen elements in a tree\nview. Find the *CountDownHeader* web block. When you click on this web\nblock, it's details are shown in the right-down corner. Click on the\nDateTime input parameter and change its value to\n\\`GetEventById.List.Current.Event.DateTime\\`.\n\n\\[img 5 -- change input\\]\n\nThat will pass down the retrieved data to the *CountDownHeader* web\nblock. Further on in this tutorial, we will implement a pretty format\nfunction to display a more friendly date time format.\n\n## Handling user input using forms\n\nIn order to create new count down records, I've created the *EventEdit*\nscreen. This screen contains a form to edit and create count down\nrecords. We will implement a date picker in this form.\n\nIn the Widgets list on the right, search for *date*. Drag and drop this\ndate picker widget in the *Ctn_InputDatePicker* container.\n\n\\[img 6 -date picker\\]\n\nThe date picker pattern requires a date variable and a Selected event\nhandler. Go ahead and click the Input1 input that has been created. As\nvariable select \\`GetEventById.List.Current.Event.DateTime\\`. That will\nbind the data retrieved from the database with your input.\n\n\\[img 7\\]\n\nNow we need to implement an event handler to update a selected date.\nClick *New Client Action*.\n\n\\[img 8 -- add event handler\\]\n\nIn your new event handler, add an assign. Assign\n\\`GetEventById.List.Current.Event.DateTime\\` to \\`SelectedDateTime\\`.\n\n\\[img 9 -- set new date time\\]\n\n## Delete items from our local database\n\nOutsystems provides built-in database actions. You can use these to\nmanipulate data in your local database. In the Logic tab create an\nclient action called \\`Event_Delete\\`. Add an \\`EventId\\` input\nparameter. Outsystems should automatically set it's type to Event\nidentifier. If not, change it accordingly. From the Data tab, drag the\nDelete action to the new delete wrapper.\n\n\\[img 10 -- delete action\\]\n\n## Implementing a new library \n\nDate pretty format\n\nOutsystems provides multiple ways to extend your logic beyond your\nplatform. The easiest way is by downloading a plugin from the Forge.\nClick the Forge tab and search for *Date pretty format*. Download the\n*DateTime_PrettyFormat* plugin. In your Count down app, open *Manage\nreferences*. Search for the xx module and add a reference xx action.\n\n## Testing the app\n\nClick the One-click Publish button to upload your changes. When your\napplication is published, it turns into \"Open in browser\". Clicking it\nwill open Device Preview, where you can test a preview in the browser.\n\nPublish and test app\n\nDebugging?"}},"SEO":{"keywords":null,"metaDescription":"Compare developer experience of Low Code to React Native.","metaTitle":"React Native vs. Outsystems  - developing in Outsystems"}}},"pageContext":{"id":"1e03c53c-3df1-537e-a4b6-50a875723829","slug":"react-native-vs-outsystems-developing-in-outsystems","__params":{"slug":"react-native-vs-outsystems-developing-in-outsystems"}}},"staticQueryHashes":["1343364089","2159283857","2389677789","3769587215","4020630752","584364458"],"slicesMap":{}}