{"componentChunkName":"component---src-pages-blog-strapi-post-slug-js","path":"/blog/react-native-vs-outsystems-developing-in-outsystems/","result":{"data":{"strapiPost":{"title":"React Native vs. low code - developing in Outsystems","createdAt":"2023-01-28T16:56:47.195Z","fomattedCreatedAt":"28-01-2023","cover":{"alternativeText":"react-vs-lowcode-cover.png","url":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1672319248/react_vs_lowcode_cover_bdb2cc232e.png","localFile":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/static/2b025f40e69e4f54de4ce6f6f108a79d/ce255/react_vs_lowcode_cover_bdb2cc232e.png","srcSet":"/static/2b025f40e69e4f54de4ce6f6f108a79d/ecf24/react_vs_lowcode_cover_bdb2cc232e.png 712w,\n/static/2b025f40e69e4f54de4ce6f6f108a79d/ee4bc/react_vs_lowcode_cover_bdb2cc232e.png 1423w,\n/static/2b025f40e69e4f54de4ce6f6f108a79d/ce255/react_vs_lowcode_cover_bdb2cc232e.png 2846w","sizes":"(min-width: 2846px) 2846px, 100vw"},"sources":[{"srcSet":"/static/2b025f40e69e4f54de4ce6f6f108a79d/49483/react_vs_lowcode_cover_bdb2cc232e.webp 712w,\n/static/2b025f40e69e4f54de4ce6f6f108a79d/687f8/react_vs_lowcode_cover_bdb2cc232e.webp 1423w,\n/static/2b025f40e69e4f54de4ce6f6f108a79d/5a9cd/react_vs_lowcode_cover_bdb2cc232e.webp 2846w","type":"image/webp","sizes":"(min-width: 2846px) 2846px, 100vw"}]},"width":2846,"height":1424}}}},"content":{"data":{"childMarkdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"In this series I will be comparing the developer experience of React Native and the low code platform Outsystems. We've made a "},{"type":"element","tagName":"a","properties":{"href":"/blog/react-native-vs-low-code-developing-in-react-native/"},"children":[{"type":"text","value":"demo app in Reactive Native"}]},{"type":"text","value":" now we will build the same sample app in "},{"type":"element","tagName":"a","properties":{"href":"www.outsystems.com"},"children":[{"type":"text","value":"Outsystems"}]},{"type":"text","value":". A low code development tool which supports both mobile and web applications. Building the app in both tools gives you a chance to compare the developer experience. After building the app, we will test the functionality. This can either be done on web or your own mobile phone."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This series consists of 3 blog items. In this second part I will show you how to implement some functionality in a demo app. This will be done in Outsystems' Service Studio IDE. This second tutorial can be done without "},{"type":"element","tagName":"a","properties":{"href":"/blog/react-native-vs-low-code-developing-in-react-native/"},"children":[{"type":"text","value":"the first part"}]},{"type":"text","value":", but feel free to read it!"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"The goal"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this second part we'll build an app similar to the first part of this series. The goal is to build a simple count down app, which will display a list of events. This was inspired by "},{"type":"element","tagName":"a","properties":{"href":"https://www.codementor.io/projects/mobile/countdown-mobile-app-bjzn08zcon"},"children":[{"type":"text","value":"CodeMentor's dev project"}]},{"type":"text","value":". There will be visual difference, but the functionality will be the same."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1678827716/Outsystems_1_goal_b39d4ea8d8.png","alt":"Outsystems 1 - goal.png"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{},"children":[{"type":"text","value":"You can view the "},{"type":"element","tagName":"a","properties":{"href":"https://jwagenaar.outsystemscloud.com/PreviewInDevices/?IsMobilePreview=True&DeviceName=Smartphone&URL=/Countdown/Events","target":"_blank"},"children":[{"type":"text","value":"online demo"}]},{"type":"text","value":" to get a glimpse of the end result."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this tutorial, we'll be creating a PWA. This enables easier deployment compared to a native app. Outsystems is able build native applications based on React Native, but in most cases a PWA makes more sense."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Getting started"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before we start to develop in Outsystems, you will need to follow "},{"type":"element","tagName":"a","properties":{"href":"https://success.outsystems.com/Documentation/11/Getting_started"},"children":[{"type":"text","value":"this guide"}]},{"type":"text","value":". It will help you create an account and download the required tool to start developing. The IDE Outsystems uses is Service Studio, in which you can create screens, logic and other parts of your application. It is where most of your development will take place."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To kickstart the creation of your application, I've created "},{"type":"element","tagName":"a","properties":{"href":"/projects/react-native-vs-outsystems/CountdownBoilerplate.oml"},"children":[{"type":"text","value":"this boilerplate"}]},{"type":"text","value":". Download and double-click it. That will open Service Studio and install your app."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Retrieving data from local database"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We start with creating the most basic functionality of your application: displaying data. On mobile, Outsystems "},{"type":"element","tagName":"a","properties":{"href":"https://success.outsystems.com/Documentation/11/Developing_an_Application/Use_Data/Offline"},"children":[{"type":"text","value":"uses your local storage"}]},{"type":"text","value":" to save your data. Retrieving that data is quite easy using Aggregates. Aggregates provide you a visual way of writing queries on your local storage."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Open the EventDetail screen in Service studio and right click. That will\npresent you with the following options:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1678827784/Outsystems_3_add_aggregate_060041740f.png","alt":"Outsystems 3 - add aggregate.png"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Click "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Fetch data from Local Storage"}]},{"type":"text","value":". That will create an aggregate on your screen. Click "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Add Source"}]},{"type":"text","value":" and select "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Event"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1679227314/Outsystems_4_Select_event_cc866ab96e.png","alt":"Outsystems 4 - Select event.png"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Click on the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Widget Tree"}]},{"type":"text","value":" tab to view your screen elements in a tree view. Find the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"CountDownHeader"}]},{"type":"text","value":" web block. When you click on this web block, it's details are shown in the right-down corner. Click on the DateTime input parameter and change its value to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"GetEventById.List.Current.Event.DateTime"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1678827870/Outsystems_5_change_input_cf66df8602.png","alt":"Outsystems 5 - change input.png"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"That will pass down the retrieved data to the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"CountDownHeader"}]},{"type":"text","value":" web block. Further on in this tutorial, we will implement a pretty format function to display a more friendly date time format."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Handling user input using forms"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In order to create new count down records, I've created the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"EventEdit"}]},{"type":"text","value":" screen. This screen contains a form to edit and create count down records. We will implement a date picker in this form."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the Widgets list on the right, search for "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"date"}]},{"type":"text","value":". Drag and drop this date picker widget in the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Ctn_InputDatePicker"}]},{"type":"text","value":" container."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1679227494/Outsystems_6_Datepicker_125aca631d.png","alt":"Outsystems 6 - Datepicker.png"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The date picker pattern requires a date variable and a Selected event handler. Go ahead and click the Input1 input that has been created. As variable select "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"GetEventById.List.Current.Event.DateTime"}]},{"type":"text","value":". That will bind the data retrieved from the database with your input."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1678827919/Outsystems_7_date_picker_variable_f07c89882c.png","alt":"Outsystems 7 - date picker variable.png"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now we need to implement an event handler to update a selected date. Click "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"New Client Action"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1678827920/Outsystems_8_add_event_handler_c25d6fd1ea.png","alt":"Outsystems 8 - add event handler.png"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In your new event handler, add an assign. Assign "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"GetEventById.List.Current.Event.DateTime"}]},{"type":"text","value":" to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"SelectedDateTime"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1678827919/Outsystems_9_set_date_time_176856646c.png","alt":"Outsystems 9 - set date time.png"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Delete items from our local database"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Outsystems provides built-in database actions. You can use these to manipulate data in your local database. In the Logic tab create an client action called "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Event_Delete"}]},{"type":"text","value":". Add an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"EventId"}]},{"type":"text","value":" input parameter. Outsystems should automatically set it's type to Event identifier. If not, change it accordingly. From the Data tab, drag the Delete action to the new delete wrapper."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1678827920/Outsystems_10_Delete_action_9c5b90302e.png","alt":"Outsystems 10 - Delete action.png"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Implementing a new library"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Outsystems provides multiple ways to extend your logic beyond your platform. The easiest way is by downloading a plugin from the Forge. Click the Forge tab and search for "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Date pretty format"}]},{"type":"text","value":". Download the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"DateTime_PrettyFormat"}]},{"type":"text","value":" plugin. In your Count down app, open "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Manage references"}]},{"type":"text","value":". Search for the 'DateTime_PrettyFormat'  module and select the action with the same name. Now you've referenced it, you can use it in your logic and screens. Go to the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"CountDownSimple"}]},{"type":"text","value":" web block and drag an Expression in the False branch of IsExpired. In the expression editor, type the following expression "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"DateTime_PrettyFormat(DateTime)"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Testing the app"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Click the One-Click Publish button to upload your changes. When your application is published, it turns into \"Open in browser\". Clicking it will open Device Preview, where you can test a preview in the browser. You've now successfully developed your first Outsystems app! Quite easy right?"}]}],"data":{"quirksMode":false}}},"content":"**In this series I will be comparing the developer experience of React Native and the low code platform Outsystems. We've made a [demo app in Reactive Native](/blog/react-native-vs-low-code-developing-in-react-native/) now we will build the same sample app in [Outsystems](www.outsystems.com). A low code development tool which supports both mobile and web applications. Building the app in both tools gives you a chance to compare the developer experience. After building the app, we will test the functionality. This can either be done on web or your own mobile phone.**\n\nThis series consists of 3 blog items. In this second part I will show you how to implement some functionality in a demo app. This will be done in Outsystems' Service Studio IDE. This second tutorial can be done without [the first part](/blog/react-native-vs-low-code-developing-in-react-native/), but feel free to read it!\n\n## The goal\n\nIn this second part we'll build an app similar to the first part of this series. The goal is to build a simple count down app, which will display a list of events. This was inspired by [CodeMentor's dev project](https://www.codementor.io/projects/mobile/countdown-mobile-app-bjzn08zcon). There will be visual difference, but the functionality will be the same.\n\n![Outsystems 1 - goal.png](https://res.cloudinary.com/dqwogyxqp/image/upload/v1678827716/Outsystems_1_goal_b39d4ea8d8.png)\n\nYou can view the <a href=\"https://jwagenaar.outsystemscloud.com/PreviewInDevices/?IsMobilePreview=True&DeviceName=Smartphone&URL=/Countdown/Events\" target=\"_blank\">online demo</a> to get a glimpse of the end result.\n\nIn this tutorial, we'll be creating a PWA. This enables easier deployment compared to a native app. Outsystems is able build native applications based on React Native, but in most cases a PWA makes more sense.\n\n## Getting started\n\nBefore we start to develop in Outsystems, you will need to follow [this guide](https://success.outsystems.com/Documentation/11/Getting_started). It will help you create an account and download the required tool to start developing. The IDE Outsystems uses is Service Studio, in which you can create screens, logic and other parts of your application. It is where most of your development will take place.\n\nTo kickstart the creation of your application, I've created [this boilerplate](/projects/react-native-vs-outsystems/CountdownBoilerplate.oml). Download and double-click it. That will open Service Studio and install your app.\n\n## Retrieving data from local database\n\nWe start with creating the most basic functionality of your application: displaying data. On mobile, Outsystems [uses your local storage](https://success.outsystems.com/Documentation/11/Developing_an_Application/Use_Data/Offline) to save your data. Retrieving that data is quite easy using Aggregates. Aggregates provide you a visual way of writing queries on your local storage.\n\nOpen the EventDetail screen in Service studio and right click. That will\npresent you with the following options:\n\n![Outsystems 3 - add aggregate.png](https://res.cloudinary.com/dqwogyxqp/image/upload/v1678827784/Outsystems_3_add_aggregate_060041740f.png)\n\nClick *Fetch data from Local Storage*. That will create an aggregate on your screen. Click *Add Source* and select *Event*.\n\n![Outsystems 4 - Select event.png](https://res.cloudinary.com/dqwogyxqp/image/upload/v1679227314/Outsystems_4_Select_event_cc866ab96e.png)\n\n\nClick on the *Widget Tree* tab to view your screen elements in a tree view. Find the *CountDownHeader* web block. When you click on this web block, it's details are shown in the right-down corner. Click on the DateTime input parameter and change its value to `GetEventById.List.Current.Event.DateTime`.\n\n![Outsystems 5 - change input.png](https://res.cloudinary.com/dqwogyxqp/image/upload/v1678827870/Outsystems_5_change_input_cf66df8602.png)\n\nThat will pass down the retrieved data to the *CountDownHeader* web block. Further on in this tutorial, we will implement a pretty format function to display a more friendly date time format.\n\n## Handling user input using forms\n\nIn order to create new count down records, I've created the *EventEdit* screen. This screen contains a form to edit and create count down records. We will implement a date picker in this form.\n\nIn the Widgets list on the right, search for *date*. Drag and drop this date picker widget in the *Ctn_InputDatePicker* container.\n\n![Outsystems 6 - Datepicker.png](https://res.cloudinary.com/dqwogyxqp/image/upload/v1679227494/Outsystems_6_Datepicker_125aca631d.png)\n\nThe date picker pattern requires a date variable and a Selected event handler. Go ahead and click the Input1 input that has been created. As variable select `GetEventById.List.Current.Event.DateTime`. That will bind the data retrieved from the database with your input.\n\n![Outsystems 7 - date picker variable.png](https://res.cloudinary.com/dqwogyxqp/image/upload/v1678827919/Outsystems_7_date_picker_variable_f07c89882c.png)\n\nNow we need to implement an event handler to update a selected date. Click *New Client Action*.\n\n![Outsystems 8 - add event handler.png](https://res.cloudinary.com/dqwogyxqp/image/upload/v1678827920/Outsystems_8_add_event_handler_c25d6fd1ea.png)\n\nIn your new event handler, add an assign. Assign `GetEventById.List.Current.Event.DateTime` to `SelectedDateTime`.\n\n![Outsystems 9 - set date time.png](https://res.cloudinary.com/dqwogyxqp/image/upload/v1678827919/Outsystems_9_set_date_time_176856646c.png)\n\n## Delete items from our local database\n\nOutsystems provides built-in database actions. You can use these to manipulate data in your local database. In the Logic tab create an client action called `Event_Delete`. Add an `EventId` input parameter. Outsystems should automatically set it's type to Event identifier. If not, change it accordingly. From the Data tab, drag the Delete action to the new delete wrapper.\n\n![Outsystems 10 - Delete action.png](https://res.cloudinary.com/dqwogyxqp/image/upload/v1678827920/Outsystems_10_Delete_action_9c5b90302e.png)\n\n## Implementing a new library \n\nOutsystems provides multiple ways to extend your logic beyond your platform. The easiest way is by downloading a plugin from the Forge. Click the Forge tab and search for *Date pretty format*. Download the *DateTime_PrettyFormat* plugin. In your Count down app, open *Manage references*. Search for the 'DateTime_PrettyFormat'  module and select the action with the same name. Now you've referenced it, you can use it in your logic and screens. Go to the *CountDownSimple* web block and drag an Expression in the False branch of IsExpired. In the expression editor, type the following expression `DateTime_PrettyFormat(DateTime)`.  \n\n## Testing the app\n\nClick the One-Click Publish button to upload your changes. When your application is published, it turns into \"Open in browser\". Clicking it will open Device Preview, where you can test a preview in the browser. You've now successfully developed your first Outsystems app! Quite easy right?"}},"SEO":{"keywords":"tutorial, outsystems, build an app, developer experience, development, mobile app, pwa","metaDescription":"Compare developer experience of Low Code to React Native.","metaTitle":"React Native vs. low code - developing in Outsystems"}}},"pageContext":{"id":"1e03c53c-3df1-537e-a4b6-50a875723829","slug":"react-native-vs-outsystems-developing-in-outsystems","__params":{"slug":"react-native-vs-outsystems-developing-in-outsystems"}}},"staticQueryHashes":["1343364089","2159283857","2389677789","3769587215","4020630752","584364458"],"slicesMap":{}}