{"componentChunkName":"component---src-pages-blog-strapi-post-slug-js","path":"/blog/outsystems-versioning-sucks-and-that-s-okay/","result":{"data":{"strapiPost":{"title":"Outsystems versioning sucks, and thatâ€™s okay","createdAt":"2023-12-13T21:46:13.362Z","fomattedCreatedAt":"13-12-2023","cover":{"alternativeText":null,"url":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1702503875/cover_043e433a44.png","localFile":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/static/15633a9bd35284949fd6d93b03afca6c/71612/cover_043e433a44.png","srcSet":"/static/15633a9bd35284949fd6d93b03afca6c/ee4bc/cover_043e433a44.png 1423w,\n/static/15633a9bd35284949fd6d93b03afca6c/eb45f/cover_043e433a44.png 2846w,\n/static/15633a9bd35284949fd6d93b03afca6c/71612/cover_043e433a44.png 5692w","sizes":"(min-width: 5692px) 5692px, 100vw"},"sources":[{"srcSet":"/static/15633a9bd35284949fd6d93b03afca6c/687f8/cover_043e433a44.webp 1423w,\n/static/15633a9bd35284949fd6d93b03afca6c/2e913/cover_043e433a44.webp 2846w,\n/static/15633a9bd35284949fd6d93b03afca6c/d60fa/cover_043e433a44.webp 5692w","type":"image/webp","sizes":"(min-width: 5692px) 5692px, 100vw"}]},"width":5692,"height":2846}}}},"content":{"data":{"childMarkdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"If you have been working longer with Outsystems, you may know that it's versioning system is quite simple. In my opinion, it sucks. Outsystems lacks support for branches, the ability to run multiple versions concurrently, or a local development server. That may be okay, let's dive into it's strengths and weaknesses."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Why branching is nice"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Branches allow you to work on features while keeping the Main branch clean and ready to deploy. If you're an Outsystems developer in a professional environment, you will probably collaborate with other developers. Usually you will be working on developing a single feature or user story per developer. Since Outsystems has a single \"branch\", you are basically blocked for deployment if you're colleagues are still working on user stories."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"How does the versioning work?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Outsystems uses a "},{"type":"element","tagName":"a","properties":{"href":"https://www.atlassian.com/continuous-delivery/continuous-integration/trunk-based-development"},"children":[{"type":"text","value":"trunk mechanism based"}]},{"type":"text","value":" development system. Environments are leveraged to run other versions. Those versions should be increasingly stable, ranking from development (least stable) to production (most stable). When you publish a module in Development, Outsystems proprietary mechanism stores a version of that module. When someone else publishes a newer version in the meantime, your version is automatically merged when published. At least, when there's no merge conflict. In that case you will have to choose pick and choose which version of the conflict to keep. In order to deploy your application, you will have to "},{"type":"element","tagName":"a","properties":{"href":"https://success.outsystems.com/documentation/11/developing_an_application/design_ui/patterns/using_traditional_web_patterns/content/tag/"},"children":[{"type":"text","value":"\"tag\" your application with a version in Lifetime"}]},{"type":"text","value":". That version can then be deployed to one of your environments."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1702504460/trunk_based_development_e9b739721d.png","alt":"trunk based development.png"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The platform does offer the option to publish your changes in a "},{"type":"element","tagName":"a","properties":{"href":"https://success.outsystems.com/documentation/11/developing_an_application/troubleshooting_applications/debugging_applications/public_and_personal_areas/"},"children":[{"type":"text","value":"Personal area"}]},{"type":"text","value":". That allows you to test and debug your changes without affecting other modules on the server. This feature however, is only supported in certain cases, for example when you haven't changed any entities, timers or site properties. So it's not a real alternative to branching I would say."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A few years back, in 2020, Outsystems main competitor Mendix "},{"type":"element","tagName":"a","properties":{"href":"https://devops.com/mendix-adds-git-repository-support-to-low-code-platform/"},"children":[{"type":"text","value":"added support for Git"}]},{"type":"text","value":" as version control system. Actually I'm a bit jealous and hope Outsystems will catch up."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Why does Outsystems not support branches?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Actually, I can only guess. There may be a few reasons. The first one is rather simple. Each environment runs a single version of an application. Even if you have multiple frontend servers, there's no way to spin up multiple versions of your application. Since Outsystems works on a Windows server with IIS, ASP.NET's web server, it's tied to the server. You cannot start a local server on your laptop in that regard. The second one is simplicity. Outsystems aims to simplify development, which in this case means less features. I agree that GIT can sometimes be complex, but at least having some more options would be nice."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Dealing with complex merges"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Neat thing is that after tagging a certain version, it can be deployed, even if you continue developing. So before starting to work on a new feature, it may be wise to tag the stable version. Consult with your colleagues to find the proper moment to tag an application. Also, consider your process and when you want to deploy versions. For example, if you use SCRUM, aim to make a releasable version each sprint."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Another option that may be useful is feature toggles or site properties to switch between versions of logic. This will help you to release a version, while still working on unfinished logic. You just disable that logic. This is something you should actually consider, it's good to release versions of your application often. That way you can avoid big bang releases. However, when the number of toggles grow, it can get messy. This option requires your discipline to actually clean up obsolete toggles. Besides that, it mainly applies to logic or interface elements. There is no easy way to toggle entity changes."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1702504496/Feature_toggle_c0667fd84c.png","alt":"Feature toggle.png"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Some hope remains for ODC. Since ODC runs on Kubernetes, the technical limitation of frontend servers would be lifted. At least for the logic part it should be possible to run a new container with a different application version. Let's hope Outsystems will listen and allow for a more flexible versioning system!"}]}],"data":{"quirksMode":false}}},"content":"**If you have been working longer with Outsystems, you may know that it's versioning system is quite simple. In my opinion, it sucks. Outsystems lacks support for branches, the ability to run multiple versions concurrently, or a local development server. That may be okay, let's dive into it's strengths and weaknesses.**\n\n#### Why branching is nice\n\nBranches allow you to work on features while keeping the Main branch clean and ready to deploy. If you're an Outsystems developer in a professional environment, you will probably collaborate with other developers. Usually you will be working on developing a single feature or user story per developer. Since Outsystems has a single \"branch\", you are basically blocked for deployment if you're colleagues are still working on user stories.\n\n#### How does the versioning work?\n\nOutsystems uses a [trunk mechanism based](https://www.atlassian.com/continuous-delivery/continuous-integration/trunk-based-development) development system. Environments are leveraged to run other versions. Those versions should be increasingly stable, ranking from development (least stable) to production (most stable). When you publish a module in Development, Outsystems proprietary mechanism stores a version of that module. When someone else publishes a newer version in the meantime, your version is automatically merged when published. At least, when there's no merge conflict. In that case you will have to choose pick and choose which version of the conflict to keep. In order to deploy your application, you will have to [\"tag\" your application with a version in Lifetime](https://success.outsystems.com/documentation/11/developing_an_application/design_ui/patterns/using_traditional_web_patterns/content/tag/). That version can then be deployed to one of your environments.\n\n![trunk based development.png](https://res.cloudinary.com/dqwogyxqp/image/upload/v1702504460/trunk_based_development_e9b739721d.png)\n\nThe platform does offer the option to publish your changes in a [Personal area](https://success.outsystems.com/documentation/11/developing_an_application/troubleshooting_applications/debugging_applications/public_and_personal_areas/). That allows you to test and debug your changes without affecting other modules on the server. This feature however, is only supported in certain cases, for example when you haven't changed any entities, timers or site properties. So it's not a real alternative to branching I would say.\n\nA few years back, in 2020, Outsystems main competitor Mendix [added support for Git](https://devops.com/mendix-adds-git-repository-support-to-low-code-platform/) as version control system. Actually I'm a bit jealous and hope Outsystems will catch up.\n\n#### Why does Outsystems not support branches?\n\nActually, I can only guess. There may be a few reasons. The first one is rather simple. Each environment runs a single version of an application. Even if you have multiple frontend servers, there's no way to spin up multiple versions of your application. Since Outsystems works on a Windows server with IIS, ASP.NET's web server, it's tied to the server. You cannot start a local server on your laptop in that regard. The second one is simplicity. Outsystems aims to simplify development, which in this case means less features. I agree that GIT can sometimes be complex, but at least having some more options would be nice.\n\n#### Dealing with complex merges\n\nNeat thing is that after tagging a certain version, it can be deployed, even if you continue developing. So before starting to work on a new feature, it may be wise to tag the stable version. Consult with your colleagues to find the proper moment to tag an application. Also, consider your process and when you want to deploy versions. For example, if you use SCRUM, aim to make a releasable version each sprint.\n\nAnother option that may be useful is feature toggles or site properties to switch between versions of logic. This will help you to release a version, while still working on unfinished logic. You just disable that logic. This is something you should actually consider, it's good to release versions of your application often. That way you can avoid big bang releases. However, when the number of toggles grow, it can get messy. This option requires your discipline to actually clean up obsolete toggles. Besides that, it mainly applies to logic or interface elements. There is no easy way to toggle entity changes.\n\n![Feature toggle.png](https://res.cloudinary.com/dqwogyxqp/image/upload/v1702504496/Feature_toggle_c0667fd84c.png)\n\nSome hope remains for ODC. Since ODC runs on Kubernetes, the technical limitation of frontend servers would be lifted. At least for the logic part it should be possible to run a new container with a different application version. Let's hope Outsystems will listen and allow for a more flexible versioning system!\n"}},"SEO":{"keywords":"Outsystems versioning, Branching limitations, Trunk-based system, Merge conflicts, Application deployment, Tagging versions, Personal area testing, Mendix comparison, Feature toggles, Site properties, Release strategies, Agile development, SCRUM practices","metaDescription":"Why Outsystems' versioning control is simple and how to deal with it.","metaTitle":"Outsystems versioning sucks, and thatâ€™s okay"}}},"pageContext":{"id":"c6bee7a0-27a9-5fd7-8953-fdf7537f555f","slug":"outsystems-versioning-sucks-and-that-s-okay","__params":{"slug":"outsystems-versioning-sucks-and-that-s-okay"}}},"staticQueryHashes":["1172744636","139564425","2159283857","3769587215","4020630752","584364458"],"slicesMap":{}}