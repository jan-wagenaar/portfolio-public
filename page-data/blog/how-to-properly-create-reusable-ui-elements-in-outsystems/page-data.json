{"componentChunkName":"component---src-pages-blog-strapi-post-slug-js","path":"/blog/how-to-properly-create-reusable-ui-elements-in-outsystems/","result":{"data":{"strapiPost":{"title":"How to properly create reusable UI elements in Outsystems","createdAt":"2022-10-08T17:22:57.101Z","fomattedCreatedAt":"08-10-2022","cover":{"alternativeText":"Service Studio cover.png","url":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1672319244/Service_Studio_cover_844d701bc4.png","localFile":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/320a8d0aaf88683661575958ecd3f7a0/c0b47/Service_Studio_cover_844d701bc4.png","srcSet":"/static/320a8d0aaf88683661575958ecd3f7a0/70002/Service_Studio_cover_844d701bc4.png 476w,\n/static/320a8d0aaf88683661575958ecd3f7a0/37d63/Service_Studio_cover_844d701bc4.png 953w,\n/static/320a8d0aaf88683661575958ecd3f7a0/c0b47/Service_Studio_cover_844d701bc4.png 1905w","sizes":"(min-width: 1905px) 1905px, 100vw"},"sources":[{"srcSet":"/static/320a8d0aaf88683661575958ecd3f7a0/4dfef/Service_Studio_cover_844d701bc4.webp 476w,\n/static/320a8d0aaf88683661575958ecd3f7a0/cb16f/Service_Studio_cover_844d701bc4.webp 953w,\n/static/320a8d0aaf88683661575958ecd3f7a0/85467/Service_Studio_cover_844d701bc4.webp 1905w","type":"image/webp","sizes":"(min-width: 1905px) 1905px, 100vw"}]},"width":1905,"height":1075}}}},"content":{"data":{"childMarkdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Outsystems provides multiple ways to style UI elements, but you shouldn't use all of them. Luckily, Outsystems can help you create reusable UI widgets. All it requires is some discipline and a little CSS knowledge."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"style-tab","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#style-tab","ariaLabel":"style tab permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Style tab"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"One of the ways you can style an interface element is the style tab in Service Studio. It contains the basics of styles you can apply, like making font bold, align centre and changing colours. This translates to CSS that is applied to the selected element. Besides that, you can enter CSS directly in the input below it. This is a quick and dirty way in changing the appearance of your application. But, there's a downside to it. Actually there are more, but the major one is this: re-usability. Styles are often repeated, so you should structure your styling in such a way it leverages the reusability of CSS."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1643663255/Service_Studio_styles_tab_3353049456.png","alt":"Service Studio styles tab.png"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"css-classes","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#css-classes","ariaLabel":"css classes permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"CSS classes"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Styling added in the Styles tab are injected in the style property of an HTML element. Each CSS property needs to be declared separately. If you're using a red colour, each element will need to have style=\"color: red\" set. And since you're sending each character of an HTML file over the line, this will hinder performance. So, using CSS classes is the way to go when styling elements. You can include your CSS rules on a theme, screen or block level. To improve re-usability it's best to include common rules in a theme, and leave as few as possible in screens. Theme CSS files are cached, so will be quicker to load."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"web-blocks","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#web-blocks","ariaLabel":"web blocks permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Web blocks"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You're probably familiar with the concept of web blocks, which allow you to create reusable block interface elements and logic. They can contain both Outsystems widgets and custom build elements. Web blocks can be shared across modules and applications. This way you can reuse a block in different applications. For example, you may create a library of custom widgets handling forms. Often you will have to find a balance between customization and standardization. Everything on a block level will not be accessible from a parent (screen). This can be annoying, if you're using the web block purely for styling. But here's the trick: introducing placeholders!"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"placeholders","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#placeholders","ariaLabel":"placeholders permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Placeholders"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Placeholders allow you to inject elements from parent in a block. In general terms, it leaves an empty area to be filled with an expression, button or other widgets. This element lives in the web block but can be manipulated or refreshed by the parent. If you're not getting the concept, don't worry, I'll show you an example."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1643663291/Service_studio_web_block_Employee_798f05d0f3.png","alt":"Service studio web block Employee.png"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"demo","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#demo","ariaLabel":"demo permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Demo"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here I've created a web block contain a number of placeholders, like Image, Name and ActionButton. We'll use this web block solely for styling, so we won't mind the fact that we'll not be able to handle events from the block itself. If you want to learn more about web blocks that implement their own logic, check the "},{"type":"element","tagName":"a","properties":{"href":"https://success.outsystems.com/Documentation/11/Reference/OutSystems_Language/Traditional_Web/Web_Interfaces/Navigating_in_the_Application/Web_Block"},"children":[{"type":"text","value":"Outsystems documentation"}]},{"type":"text","value":". With the web block created, we can open the CSS screen, and start adding custom CSS rules. As mention before, I encourage using classes from the theme. So to the Name placeholder, I'll add the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"margin-top-m"}]},{"type":"text","value":" class to Style Classes."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1643663366/Service_studio_web_block_Employee_1_680f78d9db.png","alt":"Service studio web block Employee 1.png"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We'll do the same to the ActionButton placeholder. Now we'll add the web block to a screen. I added mine to a ListRecord with data from the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Sample_Employee"}]},{"type":"text","value":" entity from the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"OutSystemsSampleDataDB"}]},{"type":"text","value":" module. It'll look something like this."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1643663529/Service_studio_web_block_Employee_3_fef82a0436.png","alt":"Service studio web block Employee 3.png"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For the purpose of this demo I'll add the rest of the CSS to the block CSS screen. Go ahead and add these CSS rules."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"css"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-css","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-css"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","selector"]},"children":[{"type":"text","value":".card img"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","property"]},"children":[{"type":"text","value":"border-radius"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"  50%"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","selector"]},"children":[{"type":"text","value":".card .Button"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","property"]},"children":[{"type":"text","value":"background"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"var"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"--color-cyan-darker"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now I'm dropping an Image widget in the Image placeholder. Since the Sample_Employee entity has an image attribute available, we can set the Type property to "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Database"}]},{"type":"text","value":" and the Attribute to "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Sample_Employee.Picture"}]},{"type":"text","value":". Set the other ones as listed below."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1643663366/Service_studio_web_block_Employee_2_4b68dfa04d.png","alt":"Service studio web block Employee 2.png"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Drag in an Expression and set the value to "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"EmployeeTable.List.Current.Sample_Employee.FirstName + \" \" + EmployeeTable.List.Current.Sample_Employee.LastName"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1643663529/Service_studio_web_block_Employee_4_fb9540e050.png","alt":"Service studio web block Employee 4.png"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Add a button to the ActionButton placeholder. Under Destination choose "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"New screen action"}]},{"type":"text","value":". This can be filled with whatever logic you want, I'm going for a feedback message allerting the user email address. Hit F5 or the Publish button and your module will be uploaded to the server. After uploading, click "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Open in browser"}]},{"type":"text","value":". You'll see a screen with beautifully styled web blocks!"}]}],"data":{"quirksMode":false}}},"content":"**Outsystems provides multiple ways to style UI elements, but you shouldn't use all of them. Luckily, Outsystems can help you create reusable UI widgets. All it requires is some discipline and a little CSS knowledge.**\n\n### Style tab\nOne of the ways you can style an interface element is the style tab in Service Studio. It contains the basics of styles you can apply, like making font bold, align centre and changing colours. This translates to CSS that is applied to the selected element. Besides that, you can enter CSS directly in the input below it. This is a quick and dirty way in changing the appearance of your application. But, there's a downside to it. Actually there are more, but the major one is this: re-usability. Styles are often repeated, so you should structure your styling in such a way it leverages the reusability of CSS. \n\n![Service Studio styles tab.png](https://res.cloudinary.com/dqwogyxqp/image/upload/v1643663255/Service_Studio_styles_tab_3353049456.png)\n\n### CSS classes\nStyling added in the Styles tab are injected in the style property of an HTML element. Each CSS property needs to be declared separately. If you're using a red colour, each element will need to have style=\"color: red\" set. And since you're sending each character of an HTML file over the line, this will hinder performance. So, using CSS classes is the way to go when styling elements. You can include your CSS rules on a theme, screen or block level. To improve re-usability it's best to include common rules in a theme, and leave as few as possible in screens. Theme CSS files are cached, so will be quicker to load. \n\n### Web blocks\nYou're probably familiar with the concept of web blocks, which allow you to create reusable block interface elements and logic. They can contain both Outsystems widgets and custom build elements. Web blocks can be shared across modules and applications. This way you can reuse a block in different applications. For example, you may create a library of custom widgets handling forms. Often you will have to find a balance between customization and standardization. Everything on a block level will not be accessible from a parent (screen). This can be annoying, if you're using the web block purely for styling. But here's the trick: introducing placeholders!\n\n### Placeholders\n\nPlaceholders allow you to inject elements from parent in a block. In general terms, it leaves an empty area to be filled with an expression, button or other widgets. This element lives in the web block but can be manipulated or refreshed by the parent. If you're not getting the concept, don't worry, I'll show you an example. \n\n![Service studio web block Employee.png](https://res.cloudinary.com/dqwogyxqp/image/upload/v1643663291/Service_studio_web_block_Employee_798f05d0f3.png)\n\n### Demo\nHere I've created a web block contain a number of placeholders, like Image, Name and ActionButton. We'll use this web block solely for styling, so we won't mind the fact that we'll not be able to handle events from the block itself. If you want to learn more about web blocks that implement their own logic, check the [Outsystems documentation](https://success.outsystems.com/Documentation/11/Reference/OutSystems_Language/Traditional_Web/Web_Interfaces/Navigating_in_the_Application/Web_Block). With the web block created, we can open the CSS screen, and start adding custom CSS rules. As mention before, I encourage using classes from the theme. So to the Name placeholder, I'll add the _margin-top-m_ class to Style Classes.\n\n![Service studio web block Employee 1.png](https://res.cloudinary.com/dqwogyxqp/image/upload/v1643663366/Service_studio_web_block_Employee_1_680f78d9db.png)\n\nWe'll do the same to the ActionButton placeholder. Now we'll add the web block to a screen. I added mine to a ListRecord with data from the _Sample_Employee_ entity from the _OutSystemsSampleDataDB_ module. It'll look something like this. \n\n![Service studio web block Employee 3.png](https://res.cloudinary.com/dqwogyxqp/image/upload/v1643663529/Service_studio_web_block_Employee_3_fef82a0436.png)\n\nFor the purpose of this demo I'll add the rest of the CSS to the block CSS screen. Go ahead and add these CSS rules.\n\n```css\n.card img {\n    border-radius:  50%;\n}\n\n.card .Button {\n    background: var(--color-cyan-darker);\n}\n```\n\n\nNow I'm dropping an Image widget in the Image placeholder. Since the Sample_Employee entity has an image attribute available, we can set the Type property to _Database_ and the Attribute to _Sample_Employee.Picture_. Set the other ones as listed below.\n\n![Service studio web block Employee 2.png](https://res.cloudinary.com/dqwogyxqp/image/upload/v1643663366/Service_studio_web_block_Employee_2_4b68dfa04d.png)\n\nDrag in an Expression and set the value to _EmployeeTable.List.Current.Sample_Employee.FirstName + \" \" + EmployeeTable.List.Current.Sample_Employee.LastName_. \n\n![Service studio web block Employee 4.png](https://res.cloudinary.com/dqwogyxqp/image/upload/v1643663529/Service_studio_web_block_Employee_4_fb9540e050.png)\n\nAdd a button to the ActionButton placeholder. Under Destination choose _New screen action_. This can be filled with whatever logic you want, I'm going for a feedback message allerting the user email address. Hit F5 or the Publish button and your module will be uploaded to the server. After uploading, click _Open in browser_. You'll see a screen with beautifully styled web blocks!\n\n"}},"SEO":{"keywords":"reusability, components, CSS, frontend developing, development","metaDescription":"Outsystems can help you create reusable UI widgets. All it requires is some discipline and a little CSS knowledge.","metaTitle":"How to properly create reusable UI elements in Outsystems"}}},"pageContext":{"id":"6355f6fd-ad0d-59c2-9396-870633660cf6","slug":"how-to-properly-create-reusable-ui-elements-in-outsystems","__params":{"slug":"how-to-properly-create-reusable-ui-elements-in-outsystems"}}},"staticQueryHashes":["1172744636","139564425","2159283857","3769587215","4020630752","584364458"],"slicesMap":{}}