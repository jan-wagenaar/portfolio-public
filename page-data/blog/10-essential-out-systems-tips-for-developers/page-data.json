{"componentChunkName":"component---src-pages-blog-strapi-post-slug-js","path":"/blog/10-essential-out-systems-tips-for-developers/","result":{"data":{"strapiPost":{"title":"10 Essential OutSystems Tips for Developers","createdAt":"2023-06-06T20:51:43.761Z","fomattedCreatedAt":"06-06-2023","cover":{"alternativeText":null,"url":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1686084596/top_10_tips_outsystems_cover_34409284b3.png","localFile":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/static/b112560cedcfce1167e1557455575534/316cf/top_10_tips_outsystems_cover_34409284b3.png","srcSet":"/static/b112560cedcfce1167e1557455575534/ee4bc/top_10_tips_outsystems_cover_34409284b3.png 1423w,\n/static/b112560cedcfce1167e1557455575534/ce255/top_10_tips_outsystems_cover_34409284b3.png 2846w,\n/static/b112560cedcfce1167e1557455575534/316cf/top_10_tips_outsystems_cover_34409284b3.png 5692w","sizes":"(min-width: 5692px) 5692px, 100vw"},"sources":[{"srcSet":"/static/b112560cedcfce1167e1557455575534/687f8/top_10_tips_outsystems_cover_34409284b3.webp 1423w,\n/static/b112560cedcfce1167e1557455575534/5a9cd/top_10_tips_outsystems_cover_34409284b3.webp 2846w,\n/static/b112560cedcfce1167e1557455575534/f31bf/top_10_tips_outsystems_cover_34409284b3.webp 5692w","type":"image/webp","sizes":"(min-width: 5692px) 5692px, 100vw"}]},"width":5692,"height":2847}}}},"content":{"data":{"childMarkdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"I love how Outsystems helps me to develop apps quickly. However, along my journey, I've discovered a handful of tips and tricks that have made my life as a developer more enjoyable. Over the past two years, I've been gathering these \"lightbulb moments\" and learning experiences, and now, I'm thrilled to share them with you. If you had a similar moment, don't hesitate to share it at "},{"type":"element","tagName":"a","properties":{"href":"https://www.linkedin.com/in/jan-wagenaar/"},"children":[{"type":"text","value":"my LinkedIn"}]},{"type":"text","value":"!"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Tip 1: Use unique indexes to prevent duplicate data"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"One of the blessings of OutSystems is its simplicity in creating tables and performing database actions. However, if not approached with caution, this blessing can turn into a curse. I learned this the hard way when I encountered data duplication issues. To prevent duplicate records, especially in one-to-many relationships, utilize unique indexes. OutSystems provides "},{"type":"element","tagName":"a","properties":{"href":"https://success.outsystems.com/documentation/11/developing_an_application/use_data/data_modeling/create_an_entity_index/"},"children":[{"type":"text","value":"documentation on this topic"}]},{"type":"text","value":", which you can refer to for implementation details. Additionally, you can find "},{"type":"element","tagName":"a","properties":{"href":"https://success.outsystems.com/Documentation/11/Developing_an_Application/Use_Data/Data_Modeling/Entities/"},"children":[{"type":"text","value":"more data modeling tips here"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Tip 2: Use delete rules"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Continuing with the topic of data modeling, let's talk about delete rules. These rules can be configured for the foreign key attributes of entities, determining the actions to take when a referred record is deleted. While I won't delve into the details here, Joey Mooree has done an excellent job "},{"type":"element","tagName":"a","properties":{"href":"https://www.outsystems.com/forums/discussion/47223/clarity-on-delete-rule-constraints-in-entities-for-best-practise/#Post172914"},"children":[{"type":"text","value":"explaining this concept on the forums"}]},{"type":"text","value":". It's important to note the power these rules hold. Setting a delete rule to \"Delete\" initiates a cascading delete, which can be potent but may lead to performance issues, such as transaction timeouts. In many cases, I find myself opting for the \"Protect\" delete rule most of the times to ensure data integrity."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Tip 3: Use descriptions"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When developing in Outsystems, code legibility should be high on your list. Especially if you're working in a larger team. To enhance code understanding at a glance, leverage clear descriptions throughout your application. Whether it's action node labels, attribute descriptions or input parameters, use descriptions that make sense. Go beyond merely repeating their names, but instead explain typical use cases, provide business examples, or describe the transformations being performed"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Tip 4: Use Remove unused dependencies"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here's a quick win for your architecture: utilize the \"Remove unused dependencies\" feature. As someone who occasionally ends up with nonsensical references to entities or actions due to copying components, I've found this feature to be invaluable. Simply right-click on your module and select \"Remove unused dependencies\" to keep your dependencies tidy and your application optimized."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1686085687/top_10_tips_outsystems_remove_dependencies_9cc53ae4cd.png","alt":"top-10-tips-outsystems-remove-dependencies.png"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Tip 5: CTRL + SHIFT + CLICK to select part of an Action flow"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When working with action flows in Service Studio, selecting a specific section to move or edit can involve a lot of scrolling. However, here's a neat little trick I frequently use: hold down the CTRL + SHIFT keys and click on a node within your action flow. This action will automatically select all subsequent nodes in that flow, making it easier to manipulate specific sections without excessive scrolling."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Tip 6: Count(*) over()"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For the SQL enthusiasts out there, here's a recent discovery that might interest you. While OutSystems "},{"type":"element","tagName":"a","properties":{"href":"https://success.outsystems.com/documentation/11/managing_the_applications_lifecycle/manage_technical_debt/code_analysis_patterns/appropriate_record_counting/"},"children":[{"type":"text","value":"recommends creating a separate SQL query"}]},{"type":"text","value":" instead of using the count attribute within the original output, I often found myself frustrated by the overhead of maintaining double the number of queries. Thankfully, there's an alternative solution: using the \"COUNT(*) OVER()\" construct in your SELECT columns. This SQL server feature returns the total count of all matching records within each row. By incorporating this into your queries, you can access the count through \"List.Current.TotalCount\" and avoid the need for additional queries. You can find detailed technical aspects of this feature in "},{"type":"element","tagName":"a","properties":{"href":"https://www.mssqltips.com/sqlservertip/7015/sql-count-code-examples/"},"children":[{"type":"text","value":"the tutorial provided by MSSQLTips"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Tip 7: Server-side dropdown"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"OutSystems recently introduced the Server-Side dropdown, a powerful widget that integrates standard components such as a search box, lazy-loaded lists, and an action footer. It offers extensive customization options and is particularly useful when dealing with large datasets. For instance, if you need a dropdown containing thousands of customers, utilizing the lazy-load pattern combined with search functionality ensures swift loading of your page, eliminating the need to retrieve all customer records at once."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Tip 8: Configure Label attribute for scaffolding"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Scaffolding is great for quickly generating screens and forms. However, to ensure accuracy and user-friendliness, it's beneficial to configure the Label attribute on entity and structure attributes. By doing so, OutSystems generates the appropriate labels in your forms automatically, saving you time and effort."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1686085665/top_10_tips_outsystems_set_labels_b4e8e06d8d.png","alt":"top-10-tips-outsystems-set-labels.png"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Tip 9: Use developer tools"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This tip is not exclusive to Outsystems developers, but a web developer essential. Most modern browsers, like Chrome and Firefox, include browser developer tools which offer invaluable insights into every aspect of your web application. For example, Chrome's "},{"type":"element","tagName":"a","properties":{"href":"https://developer.chrome.com/docs/devtools/storage/localstorage/"},"children":[{"type":"text","value":"Application tab"}]},{"type":"text","value":" allows you to view local storage usage, while tools like "},{"type":"element","tagName":"a","properties":{"href":"https://developer.chrome.com/blog/lighthouse-load-performance/"},"children":[{"type":"text","value":"Lighthouse"}]},{"type":"text","value":" enable you to audit performance and resource utilization. Investing some time in exploring and familiarizing yourself with developer tools will undoubtedly pay off in terms of debugging and optimization."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Tip 10: Set static entity identifiers manually"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Static entities are great for enumerations, but it's important to remember that they are, in essence, database tables. To ensure identifiers are consistent across environments, set the \"Auto number\" attribute of the identifier to \"False\". This approach eliminates the need for translation or interpretation of data when working with static entities across various environments."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Remember to share your own insights and experiences by "},{"type":"element","tagName":"a","properties":{"href":"https://www.linkedin.com/in/jan-wagenaar/"},"children":[{"type":"text","value":"connecting with me on LinkedIn"}]},{"type":"text","value":". Together, let's push the boundaries of OutSystems development!"}]}],"data":{"quirksMode":false}}},"content":"**I love how Outsystems helps me to develop apps quickly. However, along my journey, I\\'ve discovered a handful of tips and tricks that have made my life as a developer more enjoyable. Over the past two years, I\\'ve been gathering these \\\"lightbulb moments\\\" and learning experiences, and now, I\\'m thrilled to share them with you. If you had a similar moment, don't hesitate to share it at [my LinkedIn](https://www.linkedin.com/in/jan-wagenaar/)!**\n\n### Tip 1: Use unique indexes to prevent duplicate data\n\nOne of the blessings of OutSystems is its simplicity in creating tables and performing database actions. However, if not approached with caution, this blessing can turn into a curse. I learned this the hard way when I encountered data duplication issues. To prevent duplicate records, especially in one-to-many relationships, utilize unique indexes. OutSystems provides [documentation on this topic](https://success.outsystems.com/documentation/11/developing_an_application/use_data/data_modeling/create_an_entity_index/), which you can refer to for implementation details. Additionally, you can find [more data modeling tips here](https://success.outsystems.com/Documentation/11/Developing_an_Application/Use_Data/Data_Modeling/Entities/).\n\n### Tip 2: Use delete rules\n\nContinuing with the topic of data modeling, let\\'s talk about delete rules. These rules can be configured for the foreign key attributes of entities, determining the actions to take when a referred record is deleted. While I won\\'t delve into the details here, Joey Mooree has done an excellent job [explaining this concept on the forums](https://www.outsystems.com/forums/discussion/47223/clarity-on-delete-rule-constraints-in-entities-for-best-practise/#Post172914). It\\'s important to note the power these rules hold. Setting a delete rule to \\\"Delete\\\" initiates a cascading delete, which can be potent but may lead to performance issues, such as transaction timeouts. In many cases, I find myself opting for the \\\"Protect\\\" delete rule most of the times to ensure data integrity.\n\n### Tip 3: Use descriptions\n\nWhen developing in Outsystems, code legibility should be high on your list. Especially if you're working in a larger team. To enhance code understanding at a glance, leverage clear descriptions throughout your application. Whether it's action node labels, attribute descriptions or input parameters, use descriptions that make sense. Go beyond merely repeating their names, but instead explain typical use cases, provide business examples, or describe the transformations being performed\n\n### Tip 4: Use Remove unused dependencies\n\nHere\\'s a quick win for your architecture: utilize the \\\"Remove unused dependencies\\\" feature. As someone who occasionally ends up with nonsensical references to entities or actions due to copying components, I\\'ve found this feature to be invaluable. Simply right-click on your module and select \\\"Remove unused dependencies\\\" to keep your dependencies tidy and your application optimized.\n\n![top-10-tips-outsystems-remove-dependencies.png](https://res.cloudinary.com/dqwogyxqp/image/upload/v1686085687/top_10_tips_outsystems_remove_dependencies_9cc53ae4cd.png)\n\n### Tip 5: CTRL + SHIFT + CLICK to select part of an Action flow\n\nWhen working with action flows in Service Studio, selecting a specific section to move or edit can involve a lot of scrolling. However, here\\'s a neat little trick I frequently use: hold down the CTRL + SHIFT keys and click on a node within your action flow. This action will automatically select all subsequent nodes in that flow, making it easier to manipulate specific sections without excessive scrolling.\n\n### Tip 6: Count(\\*) over()\n\nFor the SQL enthusiasts out there, here\\'s a recent discovery that might interest you. While OutSystems [recommends creating a separate SQL query](https://success.outsystems.com/documentation/11/managing_the_applications_lifecycle/manage_technical_debt/code_analysis_patterns/appropriate_record_counting/) instead of using the count attribute within the original output, I often found myself frustrated by the overhead of maintaining double the number of queries. Thankfully, there\\'s an alternative solution: using the \\\"COUNT(\\*) OVER()\\\" construct in your SELECT columns. This SQL server feature returns the total count of all matching records within each row. By incorporating this into your queries, you can access the count through \\\"List.Current.TotalCount\\\" and avoid the need for additional queries. You can find detailed technical aspects of this feature in [the tutorial provided by MSSQLTips](https://www.mssqltips.com/sqlservertip/7015/sql-count-code-examples/).\n\n### Tip 7: Server-side dropdown\n\nOutSystems recently introduced the Server-Side dropdown, a powerful widget that integrates standard components such as a search box, lazy-loaded lists, and an action footer. It offers extensive customization options and is particularly useful when dealing with large datasets. For instance, if you need a dropdown containing thousands of customers, utilizing the lazy-load pattern combined with search functionality ensures swift loading of your page, eliminating the need to retrieve all customer records at once.\n\n### Tip 8: Configure Label attribute for scaffolding\n\nScaffolding is great for quickly generating screens and forms. However, to ensure accuracy and user-friendliness, it\\'s beneficial to configure the Label attribute on entity and structure attributes. By doing so, OutSystems generates the appropriate labels in your forms automatically, saving you time and effort.\n\n![top-10-tips-outsystems-set-labels.png](https://res.cloudinary.com/dqwogyxqp/image/upload/v1686085665/top_10_tips_outsystems_set_labels_b4e8e06d8d.png)\n\n### Tip 9: Use developer tools\n\nThis tip is not exclusive to Outsystems developers, but a web developer essential. Most modern browsers, like Chrome and Firefox, include browser developer tools which offer invaluable insights into every aspect of your web application. For example, Chrome\\'s [Application tab](https://developer.chrome.com/docs/devtools/storage/localstorage/) allows you to view local storage usage, while tools like [Lighthouse](https://developer.chrome.com/blog/lighthouse-load-performance/) enable you to audit performance and resource utilization. Investing some time in exploring and familiarizing yourself with developer tools will undoubtedly pay off in terms of debugging and optimization.\n\n### Tip 10: Set static entity identifiers manually\n\nStatic entities are great for enumerations, but it\\'s important to remember that they are, in essence, database tables. To ensure identifiers are consistent across environments, set the \"Auto number\" attribute of the identifier to \"False\". This approach eliminates the need for translation or interpretation of data when working with static entities across various environments.\n\nRemember to share your own insights and experiences by [connecting with me on LinkedIn](https://www.linkedin.com/in/jan-wagenaar/). Together, let\\'s push the boundaries of OutSystems development!\n"}},"SEO":{"keywords":"OutSystems development tips, OutSystems best practices, preventing duplicate data in OutSystems, OutSystems data modeling tips, enhancing code legibility in OutSystems, OutSystems architecture optimization, OutSystems productivity shortcuts, performance optimization in OutSystems, server-side dropdowns in OutSystems, customizing forms in\nOutSystems, OutSystems developer tools, consistent static entity identifiers in OutSystems","metaDescription":" From preventing duplicate data to leveraging server-side dropdowns, these tips will take your OutSystems development to the next level.","metaTitle":"10 Essential OutSystems Tips for Developers"}}},"pageContext":{"id":"d26233c0-a274-5166-82e1-83b943d706d4","slug":"10-essential-out-systems-tips-for-developers","__params":{"slug":"10-essential-out-systems-tips-for-developers"}}},"staticQueryHashes":["1343364089","2159283857","2389677789","3769587215","4020630752","584364458"],"slicesMap":{}}