{"componentChunkName":"component---src-pages-blog-strapi-post-slug-js","path":"/blog/why-you-should-learn-java-script-as-outsystems-developer/","result":{"data":{"strapiPost":{"title":"Why you should learn JavaScript as Outsystems developer","createdAt":"2022-10-08T17:27:48.260Z","fomattedCreatedAt":"08-10-2022","cover":{"alternativeText":null,"url":"https://res.cloudinary.com/dqwogyxqp/image/upload/v1672318898/cover_51879cc522_69c5df568d.png","localFile":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/static/251d621a1e006f2ce9c373589a13b630/ce255/cover_51879cc522_69c5df568d.png","srcSet":"/static/251d621a1e006f2ce9c373589a13b630/ecf24/cover_51879cc522_69c5df568d.png 712w,\n/static/251d621a1e006f2ce9c373589a13b630/ee4bc/cover_51879cc522_69c5df568d.png 1423w,\n/static/251d621a1e006f2ce9c373589a13b630/ce255/cover_51879cc522_69c5df568d.png 2846w","sizes":"(min-width: 2846px) 2846px, 100vw"},"sources":[{"srcSet":"/static/251d621a1e006f2ce9c373589a13b630/49483/cover_51879cc522_69c5df568d.webp 712w,\n/static/251d621a1e006f2ce9c373589a13b630/687f8/cover_51879cc522_69c5df568d.webp 1423w,\n/static/251d621a1e006f2ce9c373589a13b630/5a9cd/cover_51879cc522_69c5df568d.webp 2846w","type":"image/webp","sizes":"(min-width: 2846px) 2846px, 100vw"}]},"width":2846,"height":1424}}}},"content":{"data":{"childMarkdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Today I want to dive deeper in the internals of the Outsystems frontend interface. We will learn about React and how its mental models are affecting the way you develop."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"switch-to-client-side","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#switch-to-client-side","ariaLabel":"switch to client side permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Switch to client side"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A few years ago Outsystems introduced Reactive, successor of it’s Traditional Web app flavour. The latter is powered by server sided rendering, whereas Reactive is client side. This means that the JavaScript is heavily responsible for managing and rendering the data shown on the page. In most cases this means a major improvement in the perceived performance.\nLet’s consider a list with a delete function. When a user clicks the trash button in Traditional Web, the server is notified and executes the action related to it. After that the list is rebuild and rendered. Then the rendered html is sent to the user, and the page updated through an AJAX refresh. As you can see, every action needs a round trip to the server. Reactive is different. Since the HTML is rendered by the client, it’s able to update the page while the request is sent to the server. You probably can see why this will feel faster to the user."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"under-the-hood","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#under-the-hood","ariaLabel":"under the hood permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Under the hood"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Reactive is based on React, a popular JavaScript library. In 2021, React took over JQuery as most used library (according to "},{"type":"element","tagName":"a","properties":{"href":"https://www.statista.com/statistics/1124699/worldwide-developer-survey-most-used-frameworks-web/"},"children":[{"type":"text","value":"Statista"}]},{"type":"text","value":"). Fun fact, JQuery is used quite a lot in Traditional web, but has become the dinosaur in web development."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"shared-concepts","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#shared-concepts","ariaLabel":"shared concepts permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Shared concepts"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since Reactive is built on React, it shares most of its concepts. I will name of few:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{"id":"page-life-cycle","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#page-life-cycle","ariaLabel":"page life cycle permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Page life cycle"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Reactive follows the same life cycle stages when loading and interacting with a page. These life cycles are excellently explained "},{"type":"element","tagName":"a","properties":{"href":"https://blog.logrocket.com/react-lifecycle-methods-tutorial-examples/"},"children":[{"type":"text","value":"here"}]},{"type":"text","value":". You are able to define actions that are run after a lifecycle occurred. However, if you define an action for the wrong life cycle event, you may exactly slow down the loading of your page. Misunderstanding life cycles is one of the major mistakes I see with fellow developers. So stick with the purposes as defined in the "},{"type":"element","tagName":"a","properties":{"href":"https://success.outsystems.com/Documentation/11/Developing_an_Application/Implement_Application_Logic/Screen_and_Block_Lifecycle_Events#lifecycle-event-handlers"},"children":[{"type":"text","value":"Outsystems documentation"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{"id":"concurrent-data-retrieval","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#concurrent-data-retrieval","ariaLabel":"concurrent data retrieval permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Concurrent data retrieval"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I got to be honest, concurrency is not exclusive to React. But since JavaScript is able to perform multiple tasks at once, data on your page is loaded simultaneously. This can mean a major performance gain. Instead of waiting for every query to finish, we can run them all at once."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{"id":"immediate-page-updates","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#immediate-page-updates","ariaLabel":"immediate page updates permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Immediate page updates"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"React uses a mechanism called VirtualDOM, where it compares what’s changed when a page is updated. Only the parts that have been changed are rendered. This avoids costly re-renders of your whole page. As a Outsystems developer moving from Traditional Web to Reactive, you will notice the absence of the Refresh node in actions. Due to Reacts client side rendering this is simple not needed anymore."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{"id":"events-in-web-blocks","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#events-in-web-blocks","ariaLabel":"events in web blocks permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Events in web blocks"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Outsystems follows the "},{"type":"element","tagName":"a","properties":{"href":"https://erparnikagupta.medium.com/one-way-data-binding-in-react-d693b92f355"},"children":[{"type":"text","value":"one-way data binding"}]},{"type":"text","value":" concept, like React. Simply put, it means that data in your interface flows from top to bottom. I won’t fully explain this topic, but the need for events in web blocks springs from this concept."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"becoming-a-better-developer","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#becoming-a-better-developer","ariaLabel":"becoming a better developer permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Becoming a better developer"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since Outsystems relies so much on React, understanding its concepts will help you become a better developer. It will help you understand why your code slows down loading of your page. Or why a hacker was able to retrieve a secret code that was stored in the code client side. And why you should use Aggregates instead of Data Actions. Understanding the bits and pieces under the hood will prevent you from developing bad habits."}]}],"data":{"quirksMode":false}}},"content":"**Today I want to dive deeper in the internals of the Outsystems frontend interface. We will learn about React and how its mental models are affecting the way you develop.**\n\n### Switch to client side\nA few years ago Outsystems introduced Reactive, successor of it’s Traditional Web app flavour. The latter is powered by server sided rendering, whereas Reactive is client side. This means that the JavaScript is heavily responsible for managing and rendering the data shown on the page. In most cases this means a major improvement in the perceived performance. \nLet’s consider a list with a delete function. When a user clicks the trash button in Traditional Web, the server is notified and executes the action related to it. After that the list is rebuild and rendered. Then the rendered html is sent to the user, and the page updated through an AJAX refresh. As you can see, every action needs a round trip to the server. Reactive is different. Since the HTML is rendered by the client, it’s able to update the page while the request is sent to the server. You probably can see why this will feel faster to the user. \n\n### Under the hood\nReactive is based on React, a popular JavaScript library. In 2021, React took over JQuery as most used library (according to [Statista]( https://www.statista.com/statistics/1124699/worldwide-developer-survey-most-used-frameworks-web/)). Fun fact, JQuery is used quite a lot in Traditional web, but has become the dinosaur in web development. \n\n### Shared concepts\nSince Reactive is built on React, it shares most of its concepts. I will name of few:\n\n#### Page life cycle\nReactive follows the same life cycle stages when loading and interacting with a page. These life cycles are excellently explained [here]( https://blog.logrocket.com/react-lifecycle-methods-tutorial-examples/). You are able to define actions that are run after a lifecycle occurred. However, if you define an action for the wrong life cycle event, you may exactly slow down the loading of your page. Misunderstanding life cycles is one of the major mistakes I see with fellow developers. So stick with the purposes as defined in the [Outsystems documentation]( https://success.outsystems.com/Documentation/11/Developing_an_Application/Implement_Application_Logic/Screen_and_Block_Lifecycle_Events#lifecycle-event-handlers).\n\n#### Concurrent data retrieval\nI got to be honest, concurrency is not exclusive to React. But since JavaScript is able to perform multiple tasks at once, data on your page is loaded simultaneously. This can mean a major performance gain. Instead of waiting for every query to finish, we can run them all at once. \n\n#### Immediate page updates\nReact uses a mechanism called VirtualDOM, where it compares what’s changed when a page is updated. Only the parts that have been changed are rendered. This avoids costly re-renders of your whole page. As a Outsystems developer moving from Traditional Web to Reactive, you will notice the absence of the Refresh node in actions. Due to Reacts client side rendering this is simple not needed anymore.\n\n#### Events in web blocks\nOutsystems follows the [one-way data binding]( https://erparnikagupta.medium.com/one-way-data-binding-in-react-d693b92f355) concept, like React. Simply put, it means that data in your interface flows from top to bottom. I won’t fully explain this topic, but the need for events in web blocks springs from this concept. \n\n### Becoming a better developer\nSince Outsystems relies so much on React, understanding its concepts will help you become a better developer. It will help you understand why your code slows down loading of your page. Or why a hacker was able to retrieve a secret code that was stored in the code client side. And why you should use Aggregates instead of Data Actions. Understanding the bits and pieces under the hood will prevent you from developing bad habits.\n"}},"SEO":{"keywords":"Outsystems, developer, React, development patterns, learn","metaDescription":"Today I want to dive deeper in the internals of the Outsystems frontend interface.","metaTitle":"Why you should learn JavaScript as Outsystems developer"}}},"pageContext":{"id":"acbf1274-1a87-507d-bfe7-c2d9d9650a12","slug":"why-you-should-learn-java-script-as-outsystems-developer","__params":{"slug":"why-you-should-learn-java-script-as-outsystems-developer"}}},"staticQueryHashes":["1172744636","139564425","2159283857","3769587215","4020630752","584364458"],"slicesMap":{}}